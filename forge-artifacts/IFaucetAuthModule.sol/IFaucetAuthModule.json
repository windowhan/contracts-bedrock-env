{
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "nonce",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Faucet.DripParameters",
          "name": "_params",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "verify((address,bytes32),bytes32,bytes)": "f5431ffa"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"internalType\":\"struct Faucet.DripParameters\",\"name\":\"_params\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verify((address,bytes32),bytes32,bytes)\":{\"params\":{\"_id\":\"Authentication ID to verify.\",\"_params\":\"Drip parameters to verify.\",\"_proof\":\"Authentication proof to verify.\"},\"returns\":{\"_0\":\"valid_ True if the drip parameters are valid.\"}}},\"title\":\"IFaucetAuthModule\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"verify((address,bytes32),bytes32,bytes)\":{\"notice\":\"Verifies that the given drip parameters are valid.\"}},\"notice\":\"Interface for faucet authentication modules.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/periphery/faucet/authmodules/IFaucetAuthModule.sol\":\"IFaucetAuthModule\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@cwia/=lib/clones-with-immutable-args/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/solmate/\",\":clones-with-immutable-args/=lib/clones-with-immutable-args/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":safe-contracts/=lib/safe-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"src/periphery/faucet/Faucet.sol\":{\"keccak256\":\"0x589fc5a5073da3564896a08bb7d719ffd1cb79a79fdb9b298669c719b7843637\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://17e7c665cd88a50dbe86bda89198e598f2dbf00b8605c5de999f2a73e84dc016\",\"dweb:/ipfs/Qmc6nHb2TUPeKYavwdMrM1AhkaRFAaMNEz58wfnfHhkkyx\"]},\"src/periphery/faucet/authmodules/IFaucetAuthModule.sol\":{\"keccak256\":\"0x1ae04232fda8aa0ae4fced4af75032bed7020576126cf04bd53ecb329673276d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8a74059bfdfb5d091d7e3966e1e4157c20f97b4dc29b62a4a66e82d433fac850\",\"dweb:/ipfs/QmetdNihkTcus9YupsexJU7U3LSDM1EUAuVoNTH1Bebsjf\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "struct Faucet.DripParameters",
              "name": "_params",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "nonce",
                  "type": "bytes32"
                }
              ]
            },
            {
              "internalType": "bytes32",
              "name": "_id",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "_proof",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verify",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "verify((address,bytes32),bytes32,bytes)": {
            "params": {
              "_id": "Authentication ID to verify.",
              "_params": "Drip parameters to verify.",
              "_proof": "Authentication proof to verify."
            },
            "returns": {
              "_0": "valid_ True if the drip parameters are valid."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "verify((address,bytes32),bytes32,bytes)": {
            "notice": "Verifies that the given drip parameters are valid."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@cwia/=lib/clones-with-immutable-args/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@rari-capital/solmate/=lib/solmate/",
        "clones-with-immutable-args/=lib/clones-with-immutable-args/src/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "safe-contracts/=lib/safe-contracts/contracts/",
        "solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 999999
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "src/periphery/faucet/authmodules/IFaucetAuthModule.sol": "IFaucetAuthModule"
      },
      "libraries": {}
    },
    "sources": {
      "src/periphery/faucet/Faucet.sol": {
        "keccak256": "0x589fc5a5073da3564896a08bb7d719ffd1cb79a79fdb9b298669c719b7843637",
        "urls": [
          "bzz-raw://17e7c665cd88a50dbe86bda89198e598f2dbf00b8605c5de999f2a73e84dc016",
          "dweb:/ipfs/Qmc6nHb2TUPeKYavwdMrM1AhkaRFAaMNEz58wfnfHhkkyx"
        ],
        "license": "MIT"
      },
      "src/periphery/faucet/authmodules/IFaucetAuthModule.sol": {
        "keccak256": "0x1ae04232fda8aa0ae4fced4af75032bed7020576126cf04bd53ecb329673276d",
        "urls": [
          "bzz-raw://8a74059bfdfb5d091d7e3966e1e4157c20f97b4dc29b62a4a66e82d433fac850",
          "dweb:/ipfs/QmetdNihkTcus9YupsexJU7U3LSDM1EUAuVoNTH1Bebsjf"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": {}
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "verify((address,bytes32),bytes32,bytes)": {
        "notice": "Verifies that the given drip parameters are valid."
      }
    },
    "notice": "Interface for faucet authentication modules."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "verify((address,bytes32),bytes32,bytes)": {
        "params": {
          "_id": "Authentication ID to verify.",
          "_params": "Drip parameters to verify.",
          "_proof": "Authentication proof to verify."
        },
        "returns": {
          "_0": "valid_ True if the drip parameters are valid."
        }
      }
    },
    "title": "IFaucetAuthModule"
  },
  "ast": {
    "absolutePath": "src/periphery/faucet/authmodules/IFaucetAuthModule.sol",
    "id": 73966,
    "exportedSymbols": {
      "Faucet": [
        73860
      ],
      "IFaucetAuthModule": [
        73965
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:647:184",
    "nodes": [
      {
        "id": 73948,
        "nodeType": "PragmaDirective",
        "src": "32:23:184",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 73950,
        "nodeType": "ImportDirective",
        "src": "57:39:184",
        "nodes": [],
        "absolutePath": "src/periphery/faucet/Faucet.sol",
        "file": "../Faucet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 73966,
        "sourceUnit": 73861,
        "symbolAliases": [
          {
            "foreign": {
              "id": 73949,
              "name": "Faucet",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 73860,
              "src": "66:6:184",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 73965,
        "nodeType": "ContractDefinition",
        "src": "185:493:184",
        "nodes": [
          {
            "id": 73964,
            "nodeType": "FunctionDefinition",
            "src": "505:171:184",
            "nodes": [],
            "documentation": {
              "id": 73952,
              "nodeType": "StructuredDocumentation",
              "src": "219:281:184",
              "text": "@notice Verifies that the given drip parameters are valid.\n @param _params Drip parameters to verify.\n @param _id     Authentication ID to verify.\n @param _proof  Authentication proof to verify.\n @return valid_ True if the drip parameters are valid."
            },
            "functionSelector": "f5431ffa",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "verify",
            "nameLocation": "514:6:184",
            "parameters": {
              "id": 73960,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 73955,
                  "mutability": "mutable",
                  "name": "_params",
                  "nameLocation": "559:7:184",
                  "nodeType": "VariableDeclaration",
                  "scope": 73964,
                  "src": "530:36:184",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_DripParameters_$73640_memory_ptr",
                    "typeString": "struct Faucet.DripParameters"
                  },
                  "typeName": {
                    "id": 73954,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 73953,
                      "name": "Faucet.DripParameters",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 73640,
                      "src": "530:21:184"
                    },
                    "referencedDeclaration": 73640,
                    "src": "530:21:184",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_DripParameters_$73640_storage_ptr",
                      "typeString": "struct Faucet.DripParameters"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 73957,
                  "mutability": "mutable",
                  "name": "_id",
                  "nameLocation": "584:3:184",
                  "nodeType": "VariableDeclaration",
                  "scope": 73964,
                  "src": "576:11:184",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 73956,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "576:7:184",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 73959,
                  "mutability": "mutable",
                  "name": "_proof",
                  "nameLocation": "610:6:184",
                  "nodeType": "VariableDeclaration",
                  "scope": 73964,
                  "src": "597:19:184",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 73958,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "597:5:184",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "520:102:184"
            },
            "returnParameters": {
              "id": 73963,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 73962,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 73964,
                  "src": "670:4:184",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 73961,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "670:4:184",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "669:6:184"
            },
            "scope": 73965,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IFaucetAuthModule",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 73951,
          "nodeType": "StructuredDocumentation",
          "src": "98:87:184",
          "text": "@title  IFaucetAuthModule\n @notice Interface for faucet authentication modules."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          73965
        ],
        "name": "IFaucetAuthModule",
        "nameLocation": "195:17:184",
        "scope": 73966,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 184
}