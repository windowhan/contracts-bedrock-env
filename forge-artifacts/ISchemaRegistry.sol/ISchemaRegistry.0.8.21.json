{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "registerer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "contract ISchemaResolver",
              "name": "resolver",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "schema",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct SchemaRecord",
          "name": "schema",
          "type": "tuple"
        }
      ],
      "name": "Registered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        }
      ],
      "name": "getSchema",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "contract ISchemaResolver",
              "name": "resolver",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "schema",
              "type": "string"
            }
          ],
          "internalType": "struct SchemaRecord",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "schema",
          "type": "string"
        },
        {
          "internalType": "contract ISchemaResolver",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "revocable",
          "type": "bool"
        }
      ],
      "name": "register",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "getSchema(bytes32)": "a2ea7c6e",
    "register(string,address,bool)": "60d7a278"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registerer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct SchemaRecord\",\"name\":\"schema\",\"type\":\"tuple\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"getSchema\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"}],\"internalType\":\"struct SchemaRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Registered(bytes32,address,(bytes32,address,bool,string))\":{\"details\":\"Emitted when a new schema has been registered\",\"params\":{\"registerer\":\"The address of the account used to register the schema.\",\"schema\":\"The schema data.\",\"uid\":\"The schema UID.\"}}},\"kind\":\"dev\",\"methods\":{\"getSchema(bytes32)\":{\"details\":\"Returns an existing schema by UID\",\"params\":{\"uid\":\"The UID of the schema to retrieve.\"},\"returns\":{\"_0\":\"The schema data members.\"}},\"register(string,address,bool)\":{\"details\":\"Submits and reserves a new schema\",\"params\":{\"resolver\":\"An optional schema resolver.\",\"revocable\":\"Whether the schema allows revocations explicitly.\",\"schema\":\"The schema data schema.\"},\"returns\":{\"_0\":\"The UID of the new schema.\"}}},\"title\":\"ISchemaRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The interface of global attestation schemas for the Ethereum Attestation Service protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/EAS/ISchemaRegistry.sol\":\"ISchemaRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@cwia/=lib/clones-with-immutable-args/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/solmate/\",\":clones-with-immutable-args/=lib/clones-with-immutable-args/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":safe-contracts/=lib/safe-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"src/EAS/Common.sol\":{\"keccak256\":\"0xf9ddc182aaf50d620d3cbca8037ee32ae5062bfc495524f91b677668176f9309\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef8a29db6fb14f26b81e3ccc33f96ee25395383da00933af8799342260e76efe\",\"dweb:/ipfs/QmQc3WmVZhpoRcNsFMD5Jcw2vR4HidX4NQhMCtAvmNLMJd\"]},\"src/EAS/ISchemaRegistry.sol\":{\"keccak256\":\"0x68385349bbe43887f9c2541b6fddebaab309e5401e31ac46081460a812a2127b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://767a618229f8e5fc4dd4f268a2e5f545e249039032ca17772dda206032c55125\",\"dweb:/ipfs/QmWQTxkUHJtZxYHa3MBCLGcm8f5Kxc2saDYPifKEdCiquq\"]},\"src/EAS/resolver/ISchemaResolver.sol\":{\"keccak256\":\"0xf4712a6685599bd284b0c3808e7f6e08ab5e28919647404f26ca372917ddd000\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://17b31b0109cd3c1a1550738b24aa77541cc48b2ade5189bcec7808c9c9ce2c61\",\"dweb:/ipfs/QmeyKMMWsgQBeJkpr1Uugxw9bpg6oCjptyLmbR2TUqRLHB\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.21+commit.d9974bed"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "registerer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "struct SchemaRecord",
              "name": "schema",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract ISchemaResolver",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "schema",
                  "type": "string"
                }
              ],
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Registered",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getSchema",
          "outputs": [
            {
              "internalType": "struct SchemaRecord",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract ISchemaResolver",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "schema",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "schema",
              "type": "string"
            },
            {
              "internalType": "contract ISchemaResolver",
              "name": "resolver",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "register",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "getSchema(bytes32)": {
            "details": "Returns an existing schema by UID",
            "params": {
              "uid": "The UID of the schema to retrieve."
            },
            "returns": {
              "_0": "The schema data members."
            }
          },
          "register(string,address,bool)": {
            "details": "Submits and reserves a new schema",
            "params": {
              "resolver": "An optional schema resolver.",
              "revocable": "Whether the schema allows revocations explicitly.",
              "schema": "The schema data schema."
            },
            "returns": {
              "_0": "The UID of the new schema."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@cwia/=lib/clones-with-immutable-args/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@rari-capital/solmate/=lib/solmate/",
        "clones-with-immutable-args/=lib/clones-with-immutable-args/src/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "safe-contracts/=lib/safe-contracts/contracts/",
        "solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 999999
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "src/EAS/ISchemaRegistry.sol": "ISchemaRegistry"
      },
      "libraries": {}
    },
    "sources": {
      "src/EAS/Common.sol": {
        "keccak256": "0xf9ddc182aaf50d620d3cbca8037ee32ae5062bfc495524f91b677668176f9309",
        "urls": [
          "bzz-raw://ef8a29db6fb14f26b81e3ccc33f96ee25395383da00933af8799342260e76efe",
          "dweb:/ipfs/QmQc3WmVZhpoRcNsFMD5Jcw2vR4HidX4NQhMCtAvmNLMJd"
        ],
        "license": "MIT"
      },
      "src/EAS/ISchemaRegistry.sol": {
        "keccak256": "0x68385349bbe43887f9c2541b6fddebaab309e5401e31ac46081460a812a2127b",
        "urls": [
          "bzz-raw://767a618229f8e5fc4dd4f268a2e5f545e249039032ca17772dda206032c55125",
          "dweb:/ipfs/QmWQTxkUHJtZxYHa3MBCLGcm8f5Kxc2saDYPifKEdCiquq"
        ],
        "license": "MIT"
      },
      "src/EAS/resolver/ISchemaResolver.sol": {
        "keccak256": "0xf4712a6685599bd284b0c3808e7f6e08ab5e28919647404f26ca372917ddd000",
        "urls": [
          "bzz-raw://17b31b0109cd3c1a1550738b24aa77541cc48b2ade5189bcec7808c9c9ce2c61",
          "dweb:/ipfs/QmeyKMMWsgQBeJkpr1Uugxw9bpg6oCjptyLmbR2TUqRLHB"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": {}
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "notice": "The interface of global attestation schemas for the Ethereum Attestation Service protocol."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "getSchema(bytes32)": {
        "details": "Returns an existing schema by UID",
        "params": {
          "uid": "The UID of the schema to retrieve."
        },
        "returns": {
          "_0": "The schema data members."
        }
      },
      "register(string,address,bool)": {
        "details": "Submits and reserves a new schema",
        "params": {
          "resolver": "An optional schema resolver.",
          "revocable": "Whether the schema allows revocations explicitly.",
          "schema": "The schema data schema."
        },
        "returns": {
          "_0": "The UID of the new schema."
        }
      }
    },
    "events": {
      "Registered(bytes32,address,(bytes32,address,bool,string))": {
        "details": "Emitted when a new schema has been registered",
        "params": {
          "registerer": "The address of the account used to register the schema.",
          "schema": "The schema data.",
          "uid": "The schema UID."
        }
      }
    },
    "title": "ISchemaRegistry"
  },
  "ast": {
    "absolutePath": "src/EAS/ISchemaRegistry.sol",
    "id": 36106,
    "exportedSymbols": {
      "ISchemaRegistry": [
        36105
      ],
      "ISchemaResolver": [
        36161
      ],
      "SchemaRecord": [
        36071
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:1523:42",
    "nodes": [
      {
        "id": 36058,
        "nodeType": "PragmaDirective",
        "src": "32:23:42",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 36060,
        "nodeType": "ImportDirective",
        "src": "57:71:42",
        "nodes": [],
        "absolutePath": "src/EAS/resolver/ISchemaResolver.sol",
        "file": "src/EAS/resolver/ISchemaResolver.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 36106,
        "sourceUnit": 36162,
        "symbolAliases": [
          {
            "foreign": {
              "id": 36059,
              "name": "ISchemaResolver",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 36161,
              "src": "66:15:42",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 36071,
        "nodeType": "StructDefinition",
        "src": "196:285:42",
        "nodes": [],
        "canonicalName": "SchemaRecord",
        "documentation": {
          "id": 36061,
          "nodeType": "StructuredDocumentation",
          "src": "130:66:42",
          "text": "@title A struct representing a record for a submitted schema."
        },
        "members": [
          {
            "constant": false,
            "id": 36063,
            "mutability": "mutable",
            "name": "uid",
            "nameLocation": "230:3:42",
            "nodeType": "VariableDeclaration",
            "scope": 36071,
            "src": "222:11:42",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 36062,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "222:7:42",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 36066,
            "mutability": "mutable",
            "name": "resolver",
            "nameLocation": "295:8:42",
            "nodeType": "VariableDeclaration",
            "scope": 36071,
            "src": "279:24:42",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_ISchemaResolver_$36161",
              "typeString": "contract ISchemaResolver"
            },
            "typeName": {
              "id": 36065,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 36064,
                "name": "ISchemaResolver",
                "nameLocations": [
                  "279:15:42"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 36161,
                "src": "279:15:42"
              },
              "referencedDeclaration": 36161,
              "src": "279:15:42",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ISchemaResolver_$36161",
                "typeString": "contract ISchemaResolver"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 36068,
            "mutability": "mutable",
            "name": "revocable",
            "nameLocation": "343:9:42",
            "nodeType": "VariableDeclaration",
            "scope": 36071,
            "src": "338:14:42",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 36067,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "338:4:42",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 36070,
            "mutability": "mutable",
            "name": "schema",
            "nameLocation": "418:6:42",
            "nodeType": "VariableDeclaration",
            "scope": 36071,
            "src": "411:13:42",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 36069,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "411:6:42",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }
        ],
        "name": "SchemaRecord",
        "nameLocation": "203:12:42",
        "scope": 36106,
        "visibility": "public"
      },
      {
        "id": 36105,
        "nodeType": "ContractDefinition",
        "src": "613:941:42",
        "nodes": [
          {
            "id": 36082,
            "nodeType": "EventDefinition",
            "src": "860:87:42",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 36073,
              "nodeType": "StructuredDocumentation",
              "src": "645:210:42",
              "text": "@dev Emitted when a new schema has been registered\n @param uid The schema UID.\n @param registerer The address of the account used to register the schema.\n @param schema The schema data."
            },
            "eventSelector": "d0b86852e21f9e5fa4bc3b0cff9757ffe243d50c4b43968a42202153d651ea5e",
            "name": "Registered",
            "nameLocation": "866:10:42",
            "parameters": {
              "id": 36081,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36075,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "uid",
                  "nameLocation": "893:3:42",
                  "nodeType": "VariableDeclaration",
                  "scope": 36082,
                  "src": "877:19:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 36074,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "877:7:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 36077,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "registerer",
                  "nameLocation": "914:10:42",
                  "nodeType": "VariableDeclaration",
                  "scope": 36082,
                  "src": "898:26:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 36076,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "898:7:42",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 36080,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "schema",
                  "nameLocation": "939:6:42",
                  "nodeType": "VariableDeclaration",
                  "scope": 36082,
                  "src": "926:19:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_SchemaRecord_$36071_memory_ptr",
                    "typeString": "struct SchemaRecord"
                  },
                  "typeName": {
                    "id": 36079,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 36078,
                      "name": "SchemaRecord",
                      "nameLocations": [
                        "926:12:42"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 36071,
                      "src": "926:12:42"
                    },
                    "referencedDeclaration": 36071,
                    "src": "926:12:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_SchemaRecord_$36071_storage_ptr",
                      "typeString": "struct SchemaRecord"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "876:70:42"
            }
          },
          {
            "id": 36095,
            "nodeType": "FunctionDefinition",
            "src": "1217:111:42",
            "nodes": [],
            "documentation": {
              "id": 36083,
              "nodeType": "StructuredDocumentation",
              "src": "953:259:42",
              "text": "@dev Submits and reserves a new schema\n @param schema The schema data schema.\n @param resolver An optional schema resolver.\n @param revocable Whether the schema allows revocations explicitly.\n @return The UID of the new schema."
            },
            "functionSelector": "60d7a278",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "register",
            "nameLocation": "1226:8:42",
            "parameters": {
              "id": 36091,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36085,
                  "mutability": "mutable",
                  "name": "schema",
                  "nameLocation": "1251:6:42",
                  "nodeType": "VariableDeclaration",
                  "scope": 36095,
                  "src": "1235:22:42",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 36084,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1235:6:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 36088,
                  "mutability": "mutable",
                  "name": "resolver",
                  "nameLocation": "1275:8:42",
                  "nodeType": "VariableDeclaration",
                  "scope": 36095,
                  "src": "1259:24:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISchemaResolver_$36161",
                    "typeString": "contract ISchemaResolver"
                  },
                  "typeName": {
                    "id": 36087,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 36086,
                      "name": "ISchemaResolver",
                      "nameLocations": [
                        "1259:15:42"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 36161,
                      "src": "1259:15:42"
                    },
                    "referencedDeclaration": 36161,
                    "src": "1259:15:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISchemaResolver_$36161",
                      "typeString": "contract ISchemaResolver"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 36090,
                  "mutability": "mutable",
                  "name": "revocable",
                  "nameLocation": "1290:9:42",
                  "nodeType": "VariableDeclaration",
                  "scope": 36095,
                  "src": "1285:14:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 36089,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1285:4:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1234:66:42"
            },
            "returnParameters": {
              "id": 36094,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36093,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 36095,
                  "src": "1319:7:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 36092,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1319:7:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1318:9:42"
            },
            "scope": 36105,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 36104,
            "nodeType": "FunctionDefinition",
            "src": "1476:76:42",
            "nodes": [],
            "documentation": {
              "id": 36096,
              "nodeType": "StructuredDocumentation",
              "src": "1334:137:42",
              "text": "@dev Returns an existing schema by UID\n @param uid The UID of the schema to retrieve.\n @return The schema data members."
            },
            "functionSelector": "a2ea7c6e",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getSchema",
            "nameLocation": "1485:9:42",
            "parameters": {
              "id": 36099,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36098,
                  "mutability": "mutable",
                  "name": "uid",
                  "nameLocation": "1503:3:42",
                  "nodeType": "VariableDeclaration",
                  "scope": 36104,
                  "src": "1495:11:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 36097,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1495:7:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1494:13:42"
            },
            "returnParameters": {
              "id": 36103,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36102,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 36104,
                  "src": "1531:19:42",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_SchemaRecord_$36071_memory_ptr",
                    "typeString": "struct SchemaRecord"
                  },
                  "typeName": {
                    "id": 36101,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 36100,
                      "name": "SchemaRecord",
                      "nameLocations": [
                        "1531:12:42"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 36071,
                      "src": "1531:12:42"
                    },
                    "referencedDeclaration": 36071,
                    "src": "1531:12:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_SchemaRecord_$36071_storage_ptr",
                      "typeString": "struct SchemaRecord"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1530:21:42"
            },
            "scope": 36105,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ISchemaRegistry",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 36072,
          "nodeType": "StructuredDocumentation",
          "src": "483:130:42",
          "text": "@title ISchemaRegistry\n @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          36105
        ],
        "name": "ISchemaRegistry",
        "nameLocation": "623:15:42",
        "scope": 36106,
        "usedErrors": [],
        "usedEvents": [
          36082
        ]
      }
    ],
    "license": "MIT"
  },
  "id": 42
}