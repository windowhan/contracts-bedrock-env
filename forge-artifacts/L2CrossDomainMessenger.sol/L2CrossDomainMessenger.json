{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1CrossDomainMessenger",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "msgHash",
          "type": "bytes32"
        }
      ],
      "name": "FailedRelayedMessage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "msgHash",
          "type": "bytes32"
        }
      ],
      "name": "RelayedMessage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "messageNonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        }
      ],
      "name": "SentMessage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SentMessageExtension1",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MESSAGE_VERSION",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_GAS_CALLDATA_OVERHEAD",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OTHER_MESSENGER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_CALL_OVERHEAD",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_CONSTANT_OVERHEAD",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_GAS_CHECK_BUFFER",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_RESERVED_GAS",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "uint32",
          "name": "_minGasLimit",
          "type": "uint32"
        }
      ],
      "name": "baseGas",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1CrossDomainMessenger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minGasLimit",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "relayMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "uint32",
          "name": "_minGasLimit",
          "type": "uint32"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "successfulMessages",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xDomainMessageSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "",
    "sourceMap": "755:1601:123:-:0;;;1053:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;8152:33:190;;;;1154:12:123::1;:10;:12::i;:::-;1053:120:::0;755:1601;;1208:92;4418:13:20;;1251:1:123;;-1:-1:-1;;;4418:13:20;;;;4417:14;:40;;;;-1:-1:-1;4435:12:20;;:22;;;;-1:-1:-1;;;4435:12:20;;;;:22;4417:40;4409:99;;;;-1:-1:-1;;;4409:99:20;;511:2:283;4409:99:20;;;493:21:283;550:2;530:18;;;523:30;589:34;569:18;;;562:62;-1:-1:-1;;;640:18:283;;;633:44;694:19;;4409:99:20;;;;;;;;;4518:12;:22;;-1:-1:-1;;;;4518:22:20;;;-1:-1:-1;;;4518:22:20;4550:20;-1:-1:-1;;;;4550:20:20;;;;-1:-1:-1;;;4550:20:20;;;1264:29:123::1;:27;:29::i;:::-;4607:5:20::0;4591:21;;-1:-1:-1;;;;4591:21:20;;;4627:20;;896:4:283;884:17;;866:36;;4627:20:20;;854:2:283;839:18;4627:20:20;;;;;;;1208:92:123;:::o;17689:128:190:-;4910:13:20;;-1:-1:-1;;;4910:13:20;;;;4902:69;;;;-1:-1:-1;;;4902:69:20;;1115:2:283;4902:69:20;;;1097:21:283;1154:2;1134:18;;;1127:30;1193:34;1173:18;;;1166:62;-1:-1:-1;;;1244:18:283;;;1237:41;1295:19;;4902:69:20;913:407:283;4902:69:20;17764:16:190::1;:46:::0;;-1:-1:-1;;;;;;17764:46:190::1;1337:42:160;17764:46:190;::::0;;17689:128::o;14:290:283:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:283;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:283:o;913:407::-;755:1601:123;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080604052600436106101445760003560e01c80638129fc1c116100c0578063a711986911610074578063b28ade2511610059578063b28ade25146103a2578063d764ad0b146103c2578063ecc70428146103d557600080fd5b8063a71198691461033f578063b1b1b2091461037257600080fd5b80638cbeeef2116100a55780638cbeeef2146101e35780639fce812c146102cb578063a4e7f8bd146102ff57600080fd5b80638129fc1c1461029f57806383a74074146102b457600080fd5b80633f827a5a1161011757806354fd4d50116100fc57806354fd4d50146101f95780635644cfdf1461024f5780636e296e451461026557600080fd5b80633f827a5a146101bb5780634c1d6a69146101e357600080fd5b8063028f85f7146101495780630c5684981461017c5780632828d7e8146101915780633dbb202b146101a6575b600080fd5b34801561015557600080fd5b5061015e601081565b60405167ffffffffffffffff90911681526020015b60405180910390f35b34801561018857600080fd5b5061015e603f81565b34801561019d57600080fd5b5061015e604081565b6101b96101b436600461168c565b61043a565b005b3480156101c757600080fd5b506101d0600181565b60405161ffff9091168152602001610173565b3480156101ef57600080fd5b5061015e619c4081565b34801561020557600080fd5b506102426040518060400160405280600581526020017f312e362e3000000000000000000000000000000000000000000000000000000081525081565b604051610173919061175c565b34801561025b57600080fd5b5061015e61138881565b34801561027157600080fd5b5061027a61069e565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610173565b3480156102ab57600080fd5b506101b961078a565b3480156102c057600080fd5b5061015e62030d4081565b3480156102d757600080fd5b5061027a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561030b57600080fd5b5061032f61031a366004611776565b60ce6020526000908152604090205460ff1681565b6040519015158152602001610173565b34801561034b57600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061027a565b34801561037e57600080fd5b5061032f61038d366004611776565b60cb6020526000908152604090205460ff1681565b3480156103ae57600080fd5b5061015e6103bd36600461178f565b61094d565b6101b96103d03660046117e3565b6109bb565b3480156103e157600080fd5b5061042c60cd547dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e010000000000000000000000000000000000000000000000000000000000001790565b604051908152602001610173565b6105737f000000000000000000000000000000000000000000000000000000000000000061046985858561094d565b347fd764ad0b000000000000000000000000000000000000000000000000000000006104d560cd547dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e010000000000000000000000000000000000000000000000000000000000001790565b338a34898c8c6040516024016104f197969594939291906118ae565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611298565b8373ffffffffffffffffffffffffffffffffffffffff167fcb0f7ffd78f9aee47a248fae8db181db6eee833039123e026dcbff529522e52a3385856105f860cd547dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e010000000000000000000000000000000000000000000000000000000000001790565b8660405161060a95949392919061190d565b60405180910390a260405134815233907f8ebb2ec2465bdb2a06a66fc37a0963af8a2a6a1479d81d56fdb8cbb98096d5469060200160405180910390a2505060cd80547dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808216600101167fffff0000000000000000000000000000000000000000000000000000000000009091161790555050565b60cc5460009073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff21530161076d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f43726f7373446f6d61696e4d657373656e6765723a2078446f6d61696e4d657360448201527f7361676553656e646572206973206e6f7420736574000000000000000000000060648201526084015b60405180910390fd5b5060cc5473ffffffffffffffffffffffffffffffffffffffff1690565b6000546002907501000000000000000000000000000000000000000000900460ff161580156107d8575060005460ff8083167401000000000000000000000000000000000000000090920416105b610864576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610764565b600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff60ff84167401000000000000000000000000000000000000000002167fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff9091161775010000000000000000000000000000000000000000001790556108ec611326565b600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b6000611388619c4080603f610969604063ffffffff881661198a565b61097391906119ba565b61097e60108861198a565b61098b9062030d40611a08565b6109959190611a08565b61099f9190611a08565b6109a99190611a08565b6109b39190611a08565b949350505050565b60f087901c60028110610a76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604d60248201527f43726f7373446f6d61696e4d657373656e6765723a206f6e6c7920766572736960448201527f6f6e2030206f722031206d657373616765732061726520737570706f7274656460648201527f20617420746869732074696d6500000000000000000000000000000000000000608482015260a401610764565b8061ffff16600003610b6b576000610ac7878986868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508f92506113ff915050565b600081815260cb602052604090205490915060ff1615610b69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f43726f7373446f6d61696e4d657373656e6765723a206c65676163792077697460448201527f6864726177616c20616c72656164792072656c617965640000000000000000006064820152608401610764565b505b6000610bb1898989898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061141e92505050565b905073ffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffeeeeffffffffffffffffffffffffffffffffeeef330181167f000000000000000000000000000000000000000000000000000000000000000090911603610c4957853414610c2557610c25611a34565b600081815260ce602052604090205460ff1615610c4457610c44611a34565b610d9b565b3415610cfd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605060248201527f43726f7373446f6d61696e4d657373656e6765723a2076616c7565206d75737460448201527f206265207a65726f20756e6c657373206d6573736167652069732066726f6d2060648201527f612073797374656d206164647265737300000000000000000000000000000000608482015260a401610764565b600081815260ce602052604090205460ff16610d9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f43726f7373446f6d61696e4d657373656e6765723a206d65737361676520636160448201527f6e6e6f74206265207265706c61796564000000000000000000000000000000006064820152608401610764565b610da487611441565b15610e57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604360248201527f43726f7373446f6d61696e4d657373656e6765723a2063616e6e6f742073656e60448201527f64206d65737361676520746f20626c6f636b65642073797374656d206164647260648201527f6573730000000000000000000000000000000000000000000000000000000000608482015260a401610764565b600081815260cb602052604090205460ff1615610ef6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f43726f7373446f6d61696e4d657373656e6765723a206d65737361676520686160448201527f7320616c7265616479206265656e2072656c61796564000000000000000000006064820152608401610764565b610f1785610f08611388619c40611a08565b67ffffffffffffffff16611496565b1580610f3d575060cc5473ffffffffffffffffffffffffffffffffffffffff1661dead14155b1561105657600081815260ce602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555182917f99d0e048484baa1b1540b1367cb128acd7ab2946d1ed91ec10e3c85e4bf51b8f91a27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff320161104f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f43726f7373446f6d61696e4d657373656e6765723a206661696c656420746f2060448201527f72656c6179206d657373616765000000000000000000000000000000000000006064820152608401610764565b505061128f565b60cc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a1617905560006110e788619c405a6110aa9190611a63565b8988888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114b492505050565b60cc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001661dead1790559050801561117e57600082815260cb602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555183917f4641df4a962071e12719d8c8c8e5ac7fc4d97b927346a3d7a335b1f7517e133c91a261128b565b600082815260ce602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555183917f99d0e048484baa1b1540b1367cb128acd7ab2946d1ed91ec10e3c85e4bf51b8f91a27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff320161128b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f43726f7373446f6d61696e4d657373656e6765723a206661696c656420746f2060448201527f72656c6179206d657373616765000000000000000000000000000000000000006064820152608401610764565b5050505b50505050505050565b6040517fc2b3e5ac0000000000000000000000000000000000000000000000000000000081527342000000000000000000000000000000000000169063c2b3e5ac9084906112ee90889088908790600401611a7a565b6000604051808303818588803b15801561130757600080fd5b505af115801561131b573d6000803e3d6000fd5b505050505050505050565b6000547501000000000000000000000000000000000000000000900460ff166113d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610764565b60cc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001661dead179055565b600061140d858585856114ce565b805190602001209050949350505050565b600061142e878787878787611567565b8051906020012090509695505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8216301480611490575073ffffffffffffffffffffffffffffffffffffffff8216734200000000000000000000000000000000000016145b92915050565b600080603f83619c4001026040850201603f5a021015949350505050565b600080600080845160208601878a8af19695505050505050565b6060848484846040516024016114e79493929190611ac2565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fcbd4ece9000000000000000000000000000000000000000000000000000000001790529050949350505050565b606086868686868660405160240161158496959493929190611b0c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fd764ad0b0000000000000000000000000000000000000000000000000000000017905290509695505050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461162a57600080fd5b919050565b60008083601f84011261164157600080fd5b50813567ffffffffffffffff81111561165957600080fd5b60208301915083602082850101111561167157600080fd5b9250929050565b803563ffffffff8116811461162a57600080fd5b600080600080606085870312156116a257600080fd5b6116ab85611606565b9350602085013567ffffffffffffffff8111156116c757600080fd5b6116d38782880161162f565b90945092506116e6905060408601611678565b905092959194509250565b6000815180845260005b81811015611717576020818501810151868301820152016116fb565b81811115611729576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061176f60208301846116f1565b9392505050565b60006020828403121561178857600080fd5b5035919050565b6000806000604084860312156117a457600080fd5b833567ffffffffffffffff8111156117bb57600080fd5b6117c78682870161162f565b90945092506117da905060208501611678565b90509250925092565b600080600080600080600060c0888a0312156117fe57600080fd5b8735965061180e60208901611606565b955061181c60408901611606565b9450606088013593506080880135925060a088013567ffffffffffffffff81111561184657600080fd5b6118528a828b0161162f565b989b979a50959850939692959293505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b878152600073ffffffffffffffffffffffffffffffffffffffff808916602084015280881660408401525085606083015263ffffffff8516608083015260c060a083015261190060c083018486611865565b9998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8616815260806020820152600061193d608083018688611865565b905083604083015263ffffffff831660608301529695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600067ffffffffffffffff808316818516818304811182151516156119b1576119b161195b565b02949350505050565b600067ffffffffffffffff808416806119fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b92169190910492915050565b600067ffffffffffffffff808316818516808303821115611a2b57611a2b61195b565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600082821015611a7557611a7561195b565b500390565b73ffffffffffffffffffffffffffffffffffffffff8416815267ffffffffffffffff83166020820152606060408201526000611ab960608301846116f1565b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525060806040830152611afb60808301856116f1565b905082606083015295945050505050565b868152600073ffffffffffffffffffffffffffffffffffffffff808816602084015280871660408401525084606083015283608083015260c060a0830152611b5760c08301846116f1565b9897505050505050505056fea164736f6c634300080f000a",
    "sourceMap": "755:1601:123:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4452:53:190;;;;;;;;;;;;4503:2;4452:53;;;;;188:18:283;176:31;;;158:50;;146:2;131:18;4452:53:190;;;;;;;;4297:64;;;;;;;;;;;;4359:2;4297:64;;4142:62;;;;;;;;;;;;4202:2;4142:62;;8774:954;;;;;;:::i;:::-;;:::i;:::-;;3875:42;;;;;;;;;;;;3916:1;3875:42;;;;;1674:6:283;1662:19;;;1644:38;;1632:2;1617:18;3875:42:190;1500:188:283;4593:51:190;;;;;;;;;;;;4638:6;4593:51;;855:40:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;4939:53:190:-;;;;;;;;;;;;4987:5;4939:53;;15389:250;;;;;;;;;;;;;:::i;:::-;;;2630:42:283;2618:55;;;2600:74;;2588:2;2573:18;15389:250:190;2454:226:283;1208:92:123;;;;;;;;;;;;;:::i;3995:56:190:-;;;;;;;;;;;;4044:7;3995:56;;5087:40;;;;;;;;;;;;;;;6365:46;;;;;;;;;;-1:-1:-1;6365:46:190;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3035:14:283;;3028:22;3010:41;;2998:2;2983:18;6365:46:190;2870:187:283;1499:103:123;;;;;;;;;;-1:-1:-1;1580:15:123;1499:103;;5383:50:190;;;;;;;;;;-1:-1:-1;5383:50:190;;;;;:::i;:::-;;;;;;;;;;;;;;;;16707:894;;;;;;;;;;-1:-1:-1;16707:894:190;;;;;:::i;:::-;;:::i;10416:4586::-;;;;;;:::i;:::-;;:::i;15960:134::-;;;;;;;;;;;;16061:8;;;;4819:18:163;4816:30;;15960:134:190;;;;4463:25:283;;;4451:2;4436:18;15960:134:190;4317:177:283;8774:954:190;9234:285;9260:15;9289:31;9297:8;;9307:12;9289:7;:31::i;:::-;9334:9;9397:26;9425:14;16061:8;;;;4819:18:163;4816:30;;15960:134:190;9425:14;9441:10;9453:7;9462:9;9473:12;9487:8;;9357:152;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9234:12;:285::i;:::-;9547:7;9535:72;;;9556:10;9568:8;;9578:14;16061:8;;;;4819:18:163;4816:30;;15960:134:190;9578:14;9594:12;9535:72;;;;;;;;;;:::i;:::-;;;;;;;;9622:44;;9656:9;4463:25:283;;9644:10:190;;9622:44;;4451:2:283;4436:18;9622:44:190;;;;;;;-1:-1:-1;;9703:8:190;9701:10;;;;;;;;;;;;;;;;-1:-1:-1;;8774:954:190:o;15389:250::-;15484:16;;15444:7;;15484:47;:16;:47;;15463:135;;;;;;;6262:2:283;15463:135:190;;;6244:21:283;6301:2;6281:18;;;6274:30;6340:34;6320:18;;;6313:62;6411:23;6391:18;;;6384:51;6452:19;;15463:135:190;;;;;;;;;-1:-1:-1;15616:16:190;;;;;15389:250::o;1208:92:123:-;4418:13:20;;1251:1:123;;4418:13:20;;;;;4417:14;:40;;;;-1:-1:-1;4435:12:20;;:22;;;;:12;;;;;:22;4417:40;4409:99;;;;;;;6684:2:283;4409:99:20;;;6666:21:283;6723:2;6703:18;;;6696:30;6762:34;6742:18;;;6735:62;6833:16;6813:18;;;6806:44;6867:19;;4409:99:20;6482:410:283;4409:99:20;4518:12;:22;;4550:20;4518:22;;;;;4550:20;;;;;;;;;;1264:29:123::1;:27;:29::i;:::-;4607:5:20::0;4591:21;;;;;;4627:20;;7069:4:283;7057:17;;7039:36;;4627:20:20;;7027:2:283;7012:18;4627:20:20;;;;;;;1208:92:123;:::o;16707:894:190:-;16791:6;4987:5;4792:6;;4359:2;17020:49;4202:2;17020:49;;;;:::i;:::-;17019:90;;;;:::i;:::-;16917:51;4503:2;16924:8;16917:51;:::i;:::-;16853:116;;4044:7;16853:116;:::i;:::-;:257;;;;:::i;:::-;:412;;;;:::i;:::-;:587;;;;:::i;:::-;:741;;;;:::i;:::-;16809:785;16707:894;-1:-1:-1;;;;16707:894:190:o;10416:4586::-;5408:3:163;5404:16;;;10738:1:190;10728:11;;10720:101;;;;;;;8351:2:283;10720:101:190;;;8333:21:283;8390:2;8370:18;;;8363:30;8429:34;8409:18;;;8402:62;8500:34;8480:18;;;8473:62;8572:15;8551:19;;;8544:44;8605:19;;10720:101:190;8149:481:283;10720:101:190;11023:7;:12;;11034:1;11023:12;11019:247;;11051:15;11069:68;11102:7;11111;11120:8;;11069:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11130:6:190;;-1:-1:-1;11069:32:190;;-1:-1:-1;;11069:68:190:i;:::-;11159:27;;;;:18;:27;;;;;;11051:86;;-1:-1:-1;11159:27:190;;:36;11151:104;;;;;;;8837:2:283;11151:104:190;;;8819:21:283;8876:2;8856:18;;;8849:30;8915:34;8895:18;;;8888:62;8986:25;8966:18;;;8959:53;9029:19;;11151:104:190;8635:419:283;11151:104:190;11037:229;11019:247;11436:21;11472:90;11505:6;11513:7;11522;11531:6;11539:12;11553:8;;11472:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11472:32:190;;-1:-1:-1;;;11472:90:190:i;:::-;11436:126;-1:-1:-1;2049:65:123;1685:27:204;2084:10:123;1685:27:204;2049:65:123;;2099:15;2049:65;;;;11573:506:190;;11766:6;11753:9;:19;11746:27;;;;:::i;:::-;11795:29;;;;:14;:29;;;;;;;;11794:30;11787:38;;;;:::i;:::-;11573:506;;;11864:9;:14;11856:107;;;;;;;9450:2:283;11856:107:190;;;9432:21:283;9489:2;9469:18;;;9462:30;9528:34;9508:18;;;9501:62;9599:34;9579:18;;;9572:62;9671:18;9650:19;;;9643:47;9707:19;;11856:107:190;9248:484:283;11856:107:190;11986:29;;;;:14;:29;;;;;;;;11978:90;;;;;;;9939:2:283;11978:90:190;;;9921:21:283;9978:2;9958:18;;;9951:30;10017:34;9997:18;;;9990:62;10088:18;10068;;;10061:46;10124:19;;11978:90:190;9737:412:283;11978:90:190;12110:24;12126:7;12110:15;:24::i;:::-;:33;12089:135;;;;;;;10356:2:283;12089:135:190;;;10338:21:283;10395:2;10375:18;;;10368:30;10434:34;10414:18;;;10407:62;10505:34;10485:18;;;10478:62;10577:5;10556:19;;;10549:34;10600:19;;12089:135:190;10154:471:283;12089:135:190;12243:33;;;;:18;:33;;;;;;;;:42;12235:109;;;;;;;10832:2:283;12235:109:190;;;10814:21:283;10871:2;10851:18;;;10844:30;10910:34;10890:18;;;10883:62;10981:24;10961:18;;;10954:52;11023:19;;12235:109:190;10630:418:283;12235:109:190;13038:77;13057:12;13071:43;4987:5;4792:6;13071:43;:::i;:::-;13038:77;;:18;:77::i;:::-;13037:78;:145;;;-1:-1:-1;13135:16:190;;:47;:16;1337:42:160;13135:47:190;;13037:145;13020:919;;;13207:29;;;;:14;:29;;;;;;:36;;;;13239:4;13207:36;;;13262:35;13222:13;;13262:35;;;13777:41;:9;:41;13773:135;;13838:55;;;;;11255:2:283;13838:55:190;;;11237:21:283;11294:2;11274:18;;;11267:30;11333:34;11313:18;;;11306:62;11404:15;11384:18;;;11377:43;11437:19;;13838:55:190;11053:409:283;13773:135:190;13922:7;;;;13020:919;13949:16;:26;;;;;;;;;;-1:-1:-1;14000:72:190;14014:7;4792:6;14023:9;:30;;;;:::i;:::-;14055:6;14063:8;;14000:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14000:13:190;;-1:-1:-1;;;14000:72:190:i;:::-;14082:16;:46;;;;1337:42:160;14082:46:190;;;13985:87;-1:-1:-1;14139:857:190;;;;14166:33;;;;:18;:33;;;;;;:40;;;;14202:4;14166:40;;;14225:29;14185:13;;14225:29;;;14139:857;;;14285:29;;;;:14;:29;;;;;;:36;;;;14317:4;14285:36;;;14340:35;14300:13;;14340:35;;;14855:41;:9;:41;14851:135;;14916:55;;;;;11255:2:283;14916:55:190;;;11237:21:283;11294:2;11274:18;;;11267:30;11333:34;11313:18;;;11306:62;11404:15;11384:18;;;11377:43;11437:19;;14916:55:190;11053:409:283;14851:135:190;10642:4360;;;10416:4586;;;;;;;;:::o;1649:269:123:-;1766:145;;;;;312:42:166;;1766:83:123;;1858:6;;1766:145;;1880:3;;1885:9;;1896:5;;1766:145;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1649:269;;;;:::o;17689:128:190:-;4910:13:20;;;;;;;4902:69;;;;;;;12237:2:283;4902:69:20;;;12219:21:283;12276:2;12256:18;;;12249:30;12315:34;12295:18;;;12288:62;12386:13;12366:18;;;12359:41;12417:19;;4902:69:20;12035:407:283;4902:69:20;17764:16:190::1;:46:::0;;;::::1;1337:42:160;17764:46:190;::::0;;17689:128::o;3076:305:164:-;3265:7;3305:68;3341:7;3350;3359:5;3366:6;3305:35;:68::i;:::-;3295:79;;;;;;3288:86;;3076:305;;;;;;:::o;3853:375::-;4093:7;4133:87;4169:6;4177:7;4186;4195:6;4203:9;4214:5;4133:35;:87::i;:::-;4123:98;;;;;;4116:105;;3853:375;;;;;;;;:::o;2168:186:123:-;2242:4;2265:24;;;2284:4;2265:24;;:82;;-1:-1:-1;2293:54:123;;;312:42:166;2293:54:123;2265:82;2258:89;2168:186;-1:-1:-1;;2168:186:123:o;3615:365:167:-;3696:4;3712:15;3931:2;3916:12;3909:5;3905:24;3901:33;3896:2;3887:7;3883:16;3879:56;3874:2;3867:5;3863:14;3860:76;3853:84;;3615:365;-1:-1:-1;;;;3615:365:167:o;1202:536::-;1305:4;1321:13;1668:1;1635;1594:9;1588:16;1554:2;1543:9;1539:18;1496:6;1454:7;1421:4;1395:302;1367:330;1202:536;-1:-1:-1;;;;;;1202:536:167:o;3037:336:163:-;3228:12;3334:7;3343;3352:5;3359:6;3263:103;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3037:336:163;;;;;;:::o;3847:516::-;4089:12;4236:6;4256:7;4277;4298:6;4318:9;4341:5;4124:232;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3847:516:163;;;;;;;;:::o;219:196:283:-;287:20;;347:42;336:54;;326:65;;316:93;;405:1;402;395:12;316:93;219:196;;;:::o;420:347::-;471:8;481:6;535:3;528:4;520:6;516:17;512:27;502:55;;553:1;550;543:12;502:55;-1:-1:-1;576:20:283;;619:18;608:30;;605:50;;;651:1;648;641:12;605:50;688:4;680:6;676:17;664:29;;740:3;733:4;724:6;716;712:19;708:30;705:39;702:59;;;757:1;754;747:12;702:59;420:347;;;;;:::o;772:163::-;839:20;;899:10;888:22;;878:33;;868:61;;925:1;922;915:12;940:555;1027:6;1035;1043;1051;1104:2;1092:9;1083:7;1079:23;1075:32;1072:52;;;1120:1;1117;1110:12;1072:52;1143:29;1162:9;1143:29;:::i;:::-;1133:39;;1223:2;1212:9;1208:18;1195:32;1250:18;1242:6;1239:30;1236:50;;;1282:1;1279;1272:12;1236:50;1321:58;1371:7;1362:6;1351:9;1347:22;1321:58;:::i;:::-;1398:8;;-1:-1:-1;1295:84:283;-1:-1:-1;1452:37:283;;-1:-1:-1;1485:2:283;1470:18;;1452:37;:::i;:::-;1442:47;;940:555;;;;;;;:::o;1693:531::-;1735:3;1773:5;1767:12;1800:6;1795:3;1788:19;1825:1;1835:162;1849:6;1846:1;1843:13;1835:162;;;1911:4;1967:13;;;1963:22;;1957:29;1939:11;;;1935:20;;1928:59;1864:12;1835:162;;;2015:6;2012:1;2009:13;2006:87;;;2081:1;2074:4;2065:6;2060:3;2056:16;2052:27;2045:38;2006:87;-1:-1:-1;2138:2:283;2126:15;2143:66;2122:88;2113:98;;;;2213:4;2109:109;;1693:531;-1:-1:-1;;1693:531:283:o;2229:220::-;2378:2;2367:9;2360:21;2341:4;2398:45;2439:2;2428:9;2424:18;2416:6;2398:45;:::i;:::-;2390:53;2229:220;-1:-1:-1;;;2229:220:283:o;2685:180::-;2744:6;2797:2;2785:9;2776:7;2772:23;2768:32;2765:52;;;2813:1;2810;2803:12;2765:52;-1:-1:-1;2836:23:283;;2685:180;-1:-1:-1;2685:180:283:o;3062:481::-;3140:6;3148;3156;3209:2;3197:9;3188:7;3184:23;3180:32;3177:52;;;3225:1;3222;3215:12;3177:52;3265:9;3252:23;3298:18;3290:6;3287:30;3284:50;;;3330:1;3327;3320:12;3284:50;3369:58;3419:7;3410:6;3399:9;3395:22;3369:58;:::i;:::-;3446:8;;-1:-1:-1;3343:84:283;-1:-1:-1;3500:37:283;;-1:-1:-1;3533:2:283;3518:18;;3500:37;:::i;:::-;3490:47;;3062:481;;;;;:::o;3548:764::-;3663:6;3671;3679;3687;3695;3703;3711;3764:3;3752:9;3743:7;3739:23;3735:33;3732:53;;;3781:1;3778;3771:12;3732:53;3817:9;3804:23;3794:33;;3846:38;3880:2;3869:9;3865:18;3846:38;:::i;:::-;3836:48;;3903:38;3937:2;3926:9;3922:18;3903:38;:::i;:::-;3893:48;;3988:2;3977:9;3973:18;3960:32;3950:42;;4039:3;4028:9;4024:19;4011:33;4001:43;;4095:3;4084:9;4080:19;4067:33;4123:18;4115:6;4112:30;4109:50;;;4155:1;4152;4145:12;4109:50;4194:58;4244:7;4235:6;4224:9;4220:22;4194:58;:::i;:::-;3548:764;;;;-1:-1:-1;3548:764:283;;-1:-1:-1;3548:764:283;;;;4168:84;;-1:-1:-1;;;3548:764:283:o;4499:325::-;4587:6;4582:3;4575:19;4639:6;4632:5;4625:4;4620:3;4616:14;4603:43;;4691:1;4684:4;4675:6;4670:3;4666:16;4662:27;4655:38;4557:3;4813:4;4743:66;4738:2;4730:6;4726:15;4722:88;4717:3;4713:98;4709:109;4702:116;;4499:325;;;;:::o;4829:697::-;5124:6;5113:9;5106:25;5087:4;5150:42;5240:2;5232:6;5228:15;5223:2;5212:9;5208:18;5201:43;5292:2;5284:6;5280:15;5275:2;5264:9;5260:18;5253:43;;5332:6;5327:2;5316:9;5312:18;5305:34;5388:10;5380:6;5376:23;5370:3;5359:9;5355:19;5348:52;5437:3;5431;5420:9;5416:19;5409:32;5458:62;5515:3;5504:9;5500:19;5492:6;5484;5458:62;:::i;:::-;5450:70;4829:697;-1:-1:-1;;;;;;;;;4829:697:283:o;5531:524::-;5783:42;5775:6;5771:55;5760:9;5753:74;5863:3;5858:2;5847:9;5843:18;5836:31;5734:4;5884:62;5941:3;5930:9;5926:19;5918:6;5910;5884:62;:::i;:::-;5876:70;;5982:6;5977:2;5966:9;5962:18;5955:34;6037:10;6029:6;6025:23;6020:2;6009:9;6005:18;5998:51;5531:524;;;;;;;;:::o;7086:184::-;7138:77;7135:1;7128:88;7235:4;7232:1;7225:15;7259:4;7256:1;7249:15;7275:270;7314:7;7346:18;7391:2;7388:1;7384:10;7421:2;7418:1;7414:10;7477:3;7473:2;7469:12;7464:3;7461:21;7454:3;7447:11;7440:19;7436:47;7433:73;;;7486:18;;:::i;:::-;7526:13;;7275:270;-1:-1:-1;;;;7275:270:283:o;7550:353::-;7589:1;7615:18;7660:2;7657:1;7653:10;7682:3;7672:191;;7719:77;7716:1;7709:88;7820:4;7817:1;7810:15;7848:4;7845:1;7838:15;7672:191;7881:10;;7877:20;;;;;7550:353;-1:-1:-1;;7550:353:283:o;7908:236::-;7947:3;7975:18;8020:2;8017:1;8013:10;8050:2;8047:1;8043:10;8081:3;8077:2;8073:12;8068:3;8065:21;8062:47;;;8089:18;;:::i;:::-;8125:13;;7908:236;-1:-1:-1;;;;7908:236:283:o;9059:184::-;9111:77;9108:1;9101:88;9208:4;9205:1;9198:15;9232:4;9229:1;9222:15;11467:125;11507:4;11535:1;11532;11529:8;11526:34;;;11540:18;;:::i;:::-;-1:-1:-1;11577:9:283;;11467:125::o;11597:433::-;11811:42;11803:6;11799:55;11788:9;11781:74;11903:18;11895:6;11891:31;11886:2;11875:9;11871:18;11864:59;11959:2;11954;11943:9;11939:18;11932:30;11762:4;11979:45;12020:2;12009:9;12005:18;11997:6;11979:45;:::i;:::-;11971:53;11597:433;-1:-1:-1;;;;;11597:433:283:o;12447:512::-;12641:4;12670:42;12751:2;12743:6;12739:15;12728:9;12721:34;12803:2;12795:6;12791:15;12786:2;12775:9;12771:18;12764:43;;12843:3;12838:2;12827:9;12823:18;12816:31;12864:46;12905:3;12894:9;12890:19;12882:6;12864:46;:::i;:::-;12856:54;;12946:6;12941:2;12930:9;12926:18;12919:34;12447:512;;;;;;;:::o;12964:656::-;13251:6;13240:9;13233:25;13214:4;13277:42;13367:2;13359:6;13355:15;13350:2;13339:9;13335:18;13328:43;13419:2;13411:6;13407:15;13402:2;13391:9;13387:18;13380:43;;13459:6;13454:2;13443:9;13439:18;13432:34;13503:6;13497:3;13486:9;13482:19;13475:35;13547:3;13541;13530:9;13526:19;13519:32;13568:46;13609:3;13598:9;13594:19;13586:6;13568:46;:::i;:::-;13560:54;12964:656;-1:-1:-1;;;;;;;;12964:656:283:o",
    "linkReferences": {},
    "immutableReferences": {
      "74968": [
        {
          "start": 733,
          "length": 32
        },
        {
          "start": 846,
          "length": 32
        },
        {
          "start": 1087,
          "length": 32
        },
        {
          "start": 3055,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "MESSAGE_VERSION()": "3f827a5a",
    "MIN_GAS_CALLDATA_OVERHEAD()": "028f85f7",
    "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR()": "0c568498",
    "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR()": "2828d7e8",
    "OTHER_MESSENGER()": "9fce812c",
    "RELAY_CALL_OVERHEAD()": "4c1d6a69",
    "RELAY_CONSTANT_OVERHEAD()": "83a74074",
    "RELAY_GAS_CHECK_BUFFER()": "5644cfdf",
    "RELAY_RESERVED_GAS()": "8cbeeef2",
    "baseGas(bytes,uint32)": "b28ade25",
    "failedMessages(bytes32)": "a4e7f8bd",
    "initialize()": "8129fc1c",
    "l1CrossDomainMessenger()": "a7119869",
    "messageNonce()": "ecc70428",
    "relayMessage(uint256,address,address,uint256,uint256,bytes)": "d764ad0b",
    "sendMessage(address,bytes,uint32)": "3dbb202b",
    "successfulMessages(bytes32)": "b1b1b209",
    "version()": "54fd4d50",
    "xDomainMessageSender()": "6e296e45"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1CrossDomainMessenger\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"}],\"name\":\"FailedRelayedMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"}],\"name\":\"RelayedMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"messageNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"SentMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SentMessageExtension1\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MESSAGE_VERSION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_GAS_CALLDATA_OVERHEAD\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OTHER_MESSENGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_CALL_OVERHEAD\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_CONSTANT_OVERHEAD\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_GAS_CHECK_BUFFER\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_RESERVED_GAS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"}],\"name\":\"baseGas\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1CrossDomainMessenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"relayMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"successfulMessages\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xDomainMessageSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:proxied\":\"@custom:predeploy 0x4200000000000000000000000000000000000007\",\"kind\":\"dev\",\"methods\":{\"baseGas(bytes,uint32)\":{\"params\":{\"_message\":\"Message to compute the amount of required gas for.\",\"_minGasLimit\":\"Minimum desired gas limit when message goes to target.\"},\"returns\":{\"_0\":\"Amount of gas required to guarantee message receipt.\"}},\"constructor\":{\"params\":{\"_l1CrossDomainMessenger\":\"Address of the L1CrossDomainMessenger contract.\"}},\"l1CrossDomainMessenger()\":{\"custom:legacy\":\"@notice Legacy getter for the remote messenger.         Use otherMessenger going forward.\",\"returns\":{\"_0\":\"Address of the L1CrossDomainMessenger contract.\"}},\"messageNonce()\":{\"returns\":{\"_0\":\"Nonce of the next message to be sent, with added message version.\"}},\"relayMessage(uint256,address,address,uint256,uint256,bytes)\":{\"params\":{\"_message\":\"Message to send to the target.\",\"_minGasLimit\":\"Minimum amount of gas that the message can be executed with.\",\"_nonce\":\"Nonce of the message being relayed.\",\"_sender\":\"Address of the user who sent the message.\",\"_target\":\"Address that the message is targeted at.\",\"_value\":\"ETH value to send with the message.\"}},\"sendMessage(address,bytes,uint32)\":{\"params\":{\"_message\":\"Message to trigger the target address with.\",\"_minGasLimit\":\"Minimum gas limit that the message can be executed with.\",\"_target\":\"Target contract or wallet address.\"}},\"xDomainMessageSender()\":{\"returns\":{\"_0\":\"Address of the sender of the currently executing message on the other chain.\"}}},\"stateVariables\":{\"version\":{\"custom:semver\":\"1.6.0\"}},\"title\":\"L2CrossDomainMessenger\",\"version\":1},\"userdoc\":{\"events\":{\"FailedRelayedMessage(bytes32)\":{\"notice\":\"Emitted whenever a message fails to be relayed on this chain.\"},\"RelayedMessage(bytes32)\":{\"notice\":\"Emitted whenever a message is successfully relayed on this chain.\"},\"SentMessage(address,address,bytes,uint256,uint256)\":{\"notice\":\"Emitted whenever a message is sent to the other chain.\"},\"SentMessageExtension1(address,uint256)\":{\"notice\":\"Additional event data to emit, required as of Bedrock. Cannot be merged with the         SentMessage event without breaking the ABI of this contract, this is good enough.\"}},\"kind\":\"user\",\"methods\":{\"MESSAGE_VERSION()\":{\"notice\":\"Current message version identifier.\"},\"MIN_GAS_CALLDATA_OVERHEAD()\":{\"notice\":\"Extra gas added to base gas for each byte of calldata in a message.\"},\"MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR()\":{\"notice\":\"Denominator for dynamic overhead added to the base gas for a message.\"},\"MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR()\":{\"notice\":\"Numerator for dynamic overhead added to the base gas for a message.\"},\"OTHER_MESSENGER()\":{\"notice\":\"Address of the paired CrossDomainMessenger contract on the other chain.\"},\"RELAY_CALL_OVERHEAD()\":{\"notice\":\"Gas reserved for performing the external call in `relayMessage`.\"},\"RELAY_CONSTANT_OVERHEAD()\":{\"notice\":\"Constant overhead added to the base gas for a message.\"},\"RELAY_GAS_CHECK_BUFFER()\":{\"notice\":\"Gas reserved for the execution between the `hasMinGas` check and the external         call in `relayMessage`.\"},\"RELAY_RESERVED_GAS()\":{\"notice\":\"Gas reserved for finalizing the execution of `relayMessage` after the safe call.\"},\"baseGas(bytes,uint32)\":{\"notice\":\"Computes the amount of gas required to guarantee that a given message will be         received on the other chain without running out of gas. Guaranteeing that a message         will not run out of gas is important because this ensures that a message can always         be replayed on the other chain if it fails to execute completely.\"},\"constructor\":{\"notice\":\"Constructs the L2CrossDomainMessenger contract.\"},\"failedMessages(bytes32)\":{\"notice\":\"Mapping of message hashes to a boolean if and only if the message has failed to be         executed at least once. A message will not be present in this mapping if it         successfully executed on the first attempt.\"},\"initialize()\":{\"notice\":\"Initializer.\"},\"messageNonce()\":{\"notice\":\"Retrieves the next message nonce. Message version will be added to the upper two         bytes of the message nonce. Message version allows us to treat messages as having         different structures.\"},\"relayMessage(uint256,address,address,uint256,uint256,bytes)\":{\"notice\":\"Relays a message that was sent by the other CrossDomainMessenger contract. Can only         be executed via cross-chain call from the other messenger OR if the message was         already received once and is currently being replayed.\"},\"sendMessage(address,bytes,uint32)\":{\"notice\":\"Sends a message to some target address on the other chain. Note that if the call         always reverts, then the message will be unrelayable, and any ETH sent will be         permanently locked. The same will occur if the target on the other chain is         considered unsafe (see the _isUnsafeTarget() function).\"},\"successfulMessages(bytes32)\":{\"notice\":\"Mapping of message hashes to boolean receipt values. Note that a message will only         be present in this mapping if it has successfully been relayed on this chain, and         can therefore not be relayed again.\"},\"xDomainMessageSender()\":{\"notice\":\"Retrieves the address of the contract or wallet that initiated the currently         executing message on the other chain. Will throw an error if there is no message         currently being executed. Allows the recipient of a call to see who triggered it.\"}},\"notice\":\"The L2CrossDomainMessenger is a high-level interface for message passing between L1 and         L2 on the L2 side. Users are generally encouraged to use this contract instead of lower         level message passing contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/L2/L2CrossDomainMessenger.sol\":\"L2CrossDomainMessenger\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@cwia/=lib/clones-with-immutable-args/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/solmate/\",\":clones-with-immutable-args/=lib/clones-with-immutable-args/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":safe-contracts/=lib/safe-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3313a8f9bb1f9476857c9050067b31982bf2140b83d84f3bc0cec1f62bbe947f\",\"dweb:/ipfs/Qma17Pk8NRe7aB4UD3jjVxk7nSFaov3eQyv86hcyqkwJRV\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b600b852e0597aa69989cc263111f02097e2827edc1bdc70306303e3af5e9929\",\"dweb:/ipfs/QmU4WfM28A1nDqghuuGeFmN3CnVrk6opWtiF65K4vhFPeC\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xb3ebde1c8d27576db912d87c3560dab14adfb9cd001be95890ec4ba035e652e7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a709421c4f5d4677db8216055d2d4dac96a613efdb08178a9f7041f0c5cef689\",\"dweb:/ipfs/QmYs2rStvVLDnSJs8HgaMD1ABwoKKWdiVbQyNfLfFWTjTy\"]},\"lib/solmate/src/utils/FixedPointMathLib.sol\":{\"keccak256\":\"0x622fcd8a49e132df5ec7651cc6ae3aaf0cf59bdcd67a9a804a1b9e2485113b7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://af77088eb606427d4c55e578984a615779c86bc30646a20f7bb27299ba390f7c\",\"dweb:/ipfs/QmZGQdhdQDtHc7gZXWrKXgA3govc74X8U63BiWhPQK3mK8\"]},\"src/L1/ResourceMetering.sol\":{\"keccak256\":\"0xa4d524f2a5e91a0b63a62603e712001c51c77e8371b93cbb576bcb7d074b7588\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6d8141b6c6dc72d2e684c1ae388c005fd78c9ca7fc9c15dddebd227ca4fd730\",\"dweb:/ipfs/QmPfJrR4qssu769TDWJnxdTozqKtZUxiY8fs95bhfECTvG\"]},\"src/L2/L2CrossDomainMessenger.sol\":{\"keccak256\":\"0xd5b45c5535f2c9e1744743304a106abf19448a7e2085bdbbd885f1c3a6245b5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b20a79c0ea53699a8381f3e0addcc24fd4a4ffbfd730a2831df955c5385add7d\",\"dweb:/ipfs/QmaspRqrCKgw3ucD1jAfX4YXEr31TpFVLTBW35GTPzc3rb\"]},\"src/L2/L2ToL1MessagePasser.sol\":{\"keccak256\":\"0x67f440defc45e97bf1494274a9061876cbdcb10625707c534a0cb04b1c057e21\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://47900ccfcd1e4506d50dd3b14069da285eeb5f783020a0c74f58181b4c011460\",\"dweb:/ipfs/QmNUtEAxiwXT8QDbCHsX3uT4h2fh6k9f8LvMrmRK2N7K61\"]},\"src/libraries/Arithmetic.sol\":{\"keccak256\":\"0x06a5a8b00527843f0cfc1bb3c0661316966a6cc432f88be31f23cde78cd07560\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d5209e78e5415c0bf8b350362a825cc56152811abd6fcf2df3d4fa47766d3dee\",\"dweb:/ipfs/Qmf43xyc4Um32NmccayDfhm8kSnS2mhHXpPZnwABJS7cWm\"]},\"src/libraries/Burn.sol\":{\"keccak256\":\"0x90a795bcea3ef06d6d5011256c4bd63d1a4271f519246dbf1ee3e8f1c0e21010\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f60c3aa77cf0c484ddda4754157cff4dc0e2eace4bea67990daff4c0612ab5f\",\"dweb:/ipfs/QmSYGanMFve9uBC17X7hFneSFnwnJxz86Jgh6MX9BRMweb\"]},\"src/libraries/Constants.sol\":{\"keccak256\":\"0x8fcbc468fa4924f81538d4a6674031e12b62b61a88e869fdf099158a0d0c6a19\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc7b9bca6c12fdd38e556650ec1eda3cccb0de4d474d2e97904cbd483b147359\",\"dweb:/ipfs/QmW4oKjDtHJj4cNfMhMLDteQEHSUuZtwrrFUJRnZCbQTJd\"]},\"src/libraries/Encoding.sol\":{\"keccak256\":\"0xd5bbcb7da113e69562498d9543765e03912558ad66348682c2049c31e19f9d9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://afc6656ea10062c0c9d0817bb8683636caebf9222c9c102f29ea54fff74a2f93\",\"dweb:/ipfs/QmTNWtMgrTRHM6XtdUmA8bMZcuFpXoFCXgXR5vRihZWLuW\"]},\"src/libraries/Hashing.sol\":{\"keccak256\":\"0x44e2b2dcfffc39c0fc95ccd3c2118c7e7585fadf3dca327877d5756c7d4b21c3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c89e0d9cfcb08a0d3c46c85367a32bbd9703468ba4c0c5bb6e124c1d173b26b\",\"dweb:/ipfs/QmaY3nQHBBhHK1wrurVXiEeNL8hfZ1pRmhpqW44tFDJnDf\"]},\"src/libraries/Predeploys.sol\":{\"keccak256\":\"0x5af3a849f68f7c9108858ebac5c769da8f1c0309b5c0cb42eb5cbb15e3fe6058\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ffe76429a96d274577be66627eddad5cd05ad36d0cb6b9b3c3f9fa8a609dd7e\",\"dweb:/ipfs/QmVhWnB7Avg684TEQ9BExWqSN1YfLehUTWoqpjymeQEQHm\"]},\"src/libraries/SafeCall.sol\":{\"keccak256\":\"0x0636a7abb242bb5d6f5606967c8929e6aa7e63468c1e2ce40ad4780d4c4bf94f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a4daec2ac8f9907bbf84ef0a1c48f03bae8657619bc6f42b3a672f25c516f17a\",\"dweb:/ipfs/Qmf8gfRxBv8gEmCkP8YMPb2GGfj9QUnoNUyKE7UR2SWGnq\"]},\"src/libraries/Types.sol\":{\"keccak256\":\"0x75900d651301940d24c00d14f0b3b6cbd6dcf379173ceaa31d9bf5be934a9aa4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99c2632c5bf4fa3982391c32110eec9fa07917b483b2442cbaf18bdde5bdb24e\",\"dweb:/ipfs/QmSUs6Amkeootf5gKGbKi4mJpvhN2U8i1ED6ef2dskV5xc\"]},\"src/libraries/rlp/RLPWriter.sol\":{\"keccak256\":\"0x60ac401490f321c9c55e996a2c65151cd5e60de5f8f297e7c94d541c29820bb6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://070f5814db07e4a89173d44a36d90e4261ce530f7336034c01635347f2c2d88b\",\"dweb:/ipfs/QmXqr9yW5Kc8MYgr5wSehU5AiqS9pZ4FKxv7vwiwpZCcyV\"]},\"src/universal/CrossDomainMessenger.sol\":{\"keccak256\":\"0x4302ae78bcafde2737d4048bbf8fdb3dd4cd7254c015b91dfa14fdaafd412f4a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://78d3d1823ad4e1fba15921a0a361b452c85d111e2d53cbbed11a8632782ea8f3\",\"dweb:/ipfs/QmVc2rTRpn7g7WAUxDShSuy6dY5zmtbJ7hHC6sT9PcD3Gj\"]},\"src/universal/ISemver.sol\":{\"keccak256\":\"0xba34562a8026f59886d2e07d1d58d90b9691d00e0788c6263cef6c22740cab44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0826f998632f83c103c3085bf2e872db79a69022b6d2e0444c83a64ca5283c2a\",\"dweb:/ipfs/QmcJ7PNqkAfKqbjFGRordtAg1v9DvcBSKvdTkVvciLyvQR\"]},\"src/vendor/AddressAliasHelper.sol\":{\"keccak256\":\"0x6ecb83b4ec80fbe49c22f4f95d90482de64660ef5d422a19f4d4b04df31c1237\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://1d0885be6e473962f9a0622176a22300165ac0cc1a1d7f2e22b11c3d656ace88\",\"dweb:/ipfs/QmPRa3KmRpXW5P9ykveKRDgYN5zYo4cYLAYSnoqHX3KnXR\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_l1CrossDomainMessenger",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "msgHash",
              "type": "bytes32",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "FailedRelayedMessage",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "msgHash",
              "type": "bytes32",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RelayedMessage",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "messageNonce",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "gasLimit",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SentMessage",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SentMessageExtension1",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MESSAGE_VERSION",
          "outputs": [
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MIN_GAS_CALLDATA_OVERHEAD",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "OTHER_MESSENGER",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "RELAY_CALL_OVERHEAD",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "RELAY_CONSTANT_OVERHEAD",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "RELAY_GAS_CHECK_BUFFER",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "RELAY_RESERVED_GAS",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "_message",
              "type": "bytes"
            },
            {
              "internalType": "uint32",
              "name": "_minGasLimit",
              "type": "uint32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "baseGas",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "failedMessages",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "l1CrossDomainMessenger",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "messageNonce",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_minGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_message",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "relayMessage"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "_message",
              "type": "bytes"
            },
            {
              "internalType": "uint32",
              "name": "_minGasLimit",
              "type": "uint32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "sendMessage"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "successfulMessages",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "xDomainMessageSender",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "baseGas(bytes,uint32)": {
            "params": {
              "_message": "Message to compute the amount of required gas for.",
              "_minGasLimit": "Minimum desired gas limit when message goes to target."
            },
            "returns": {
              "_0": "Amount of gas required to guarantee message receipt."
            }
          },
          "constructor": {
            "params": {
              "_l1CrossDomainMessenger": "Address of the L1CrossDomainMessenger contract."
            }
          },
          "l1CrossDomainMessenger()": {
            "custom:legacy": "@notice Legacy getter for the remote messenger.         Use otherMessenger going forward.",
            "returns": {
              "_0": "Address of the L1CrossDomainMessenger contract."
            }
          },
          "messageNonce()": {
            "returns": {
              "_0": "Nonce of the next message to be sent, with added message version."
            }
          },
          "relayMessage(uint256,address,address,uint256,uint256,bytes)": {
            "params": {
              "_message": "Message to send to the target.",
              "_minGasLimit": "Minimum amount of gas that the message can be executed with.",
              "_nonce": "Nonce of the message being relayed.",
              "_sender": "Address of the user who sent the message.",
              "_target": "Address that the message is targeted at.",
              "_value": "ETH value to send with the message."
            }
          },
          "sendMessage(address,bytes,uint32)": {
            "params": {
              "_message": "Message to trigger the target address with.",
              "_minGasLimit": "Minimum gas limit that the message can be executed with.",
              "_target": "Target contract or wallet address."
            }
          },
          "xDomainMessageSender()": {
            "returns": {
              "_0": "Address of the sender of the currently executing message on the other chain."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "MESSAGE_VERSION()": {
            "notice": "Current message version identifier."
          },
          "MIN_GAS_CALLDATA_OVERHEAD()": {
            "notice": "Extra gas added to base gas for each byte of calldata in a message."
          },
          "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR()": {
            "notice": "Denominator for dynamic overhead added to the base gas for a message."
          },
          "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR()": {
            "notice": "Numerator for dynamic overhead added to the base gas for a message."
          },
          "OTHER_MESSENGER()": {
            "notice": "Address of the paired CrossDomainMessenger contract on the other chain."
          },
          "RELAY_CALL_OVERHEAD()": {
            "notice": "Gas reserved for performing the external call in `relayMessage`."
          },
          "RELAY_CONSTANT_OVERHEAD()": {
            "notice": "Constant overhead added to the base gas for a message."
          },
          "RELAY_GAS_CHECK_BUFFER()": {
            "notice": "Gas reserved for the execution between the `hasMinGas` check and the external         call in `relayMessage`."
          },
          "RELAY_RESERVED_GAS()": {
            "notice": "Gas reserved for finalizing the execution of `relayMessage` after the safe call."
          },
          "baseGas(bytes,uint32)": {
            "notice": "Computes the amount of gas required to guarantee that a given message will be         received on the other chain without running out of gas. Guaranteeing that a message         will not run out of gas is important because this ensures that a message can always         be replayed on the other chain if it fails to execute completely."
          },
          "constructor": {
            "notice": "Constructs the L2CrossDomainMessenger contract."
          },
          "failedMessages(bytes32)": {
            "notice": "Mapping of message hashes to a boolean if and only if the message has failed to be         executed at least once. A message will not be present in this mapping if it         successfully executed on the first attempt."
          },
          "initialize()": {
            "notice": "Initializer."
          },
          "messageNonce()": {
            "notice": "Retrieves the next message nonce. Message version will be added to the upper two         bytes of the message nonce. Message version allows us to treat messages as having         different structures."
          },
          "relayMessage(uint256,address,address,uint256,uint256,bytes)": {
            "notice": "Relays a message that was sent by the other CrossDomainMessenger contract. Can only         be executed via cross-chain call from the other messenger OR if the message was         already received once and is currently being replayed."
          },
          "sendMessage(address,bytes,uint32)": {
            "notice": "Sends a message to some target address on the other chain. Note that if the call         always reverts, then the message will be unrelayable, and any ETH sent will be         permanently locked. The same will occur if the target on the other chain is         considered unsafe (see the _isUnsafeTarget() function)."
          },
          "successfulMessages(bytes32)": {
            "notice": "Mapping of message hashes to boolean receipt values. Note that a message will only         be present in this mapping if it has successfully been relayed on this chain, and         can therefore not be relayed again."
          },
          "xDomainMessageSender()": {
            "notice": "Retrieves the address of the contract or wallet that initiated the currently         executing message on the other chain. Will throw an error if there is no message         currently being executed. Allows the recipient of a call to see who triggered it."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@cwia/=lib/clones-with-immutable-args/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@rari-capital/solmate/=lib/solmate/",
        "clones-with-immutable-args/=lib/clones-with-immutable-args/src/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "safe-contracts/=lib/safe-contracts/contracts/",
        "solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 999999
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "src/L2/L2CrossDomainMessenger.sol": "L2CrossDomainMessenger"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
        "keccak256": "0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e",
        "urls": [
          "bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497",
          "dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
        "keccak256": "0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3",
        "urls": [
          "bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4",
          "dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol": {
        "keccak256": "0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66",
        "urls": [
          "bzz-raw://3313a8f9bb1f9476857c9050067b31982bf2140b83d84f3bc0cec1f62bbe947f",
          "dweb:/ipfs/Qma17Pk8NRe7aB4UD3jjVxk7nSFaov3eQyv86hcyqkwJRV"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "keccak256": "0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10",
        "urls": [
          "bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487",
          "dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0",
        "urls": [
          "bzz-raw://b600b852e0597aa69989cc263111f02097e2827edc1bdc70306303e3af5e9929",
          "dweb:/ipfs/QmU4WfM28A1nDqghuuGeFmN3CnVrk6opWtiF65K4vhFPeC"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xb3ebde1c8d27576db912d87c3560dab14adfb9cd001be95890ec4ba035e652e7",
        "urls": [
          "bzz-raw://a709421c4f5d4677db8216055d2d4dac96a613efdb08178a9f7041f0c5cef689",
          "dweb:/ipfs/QmYs2rStvVLDnSJs8HgaMD1ABwoKKWdiVbQyNfLfFWTjTy"
        ],
        "license": "MIT"
      },
      "lib/solmate/src/utils/FixedPointMathLib.sol": {
        "keccak256": "0x622fcd8a49e132df5ec7651cc6ae3aaf0cf59bdcd67a9a804a1b9e2485113b7d",
        "urls": [
          "bzz-raw://af77088eb606427d4c55e578984a615779c86bc30646a20f7bb27299ba390f7c",
          "dweb:/ipfs/QmZGQdhdQDtHc7gZXWrKXgA3govc74X8U63BiWhPQK3mK8"
        ],
        "license": "MIT"
      },
      "src/L1/ResourceMetering.sol": {
        "keccak256": "0xa4d524f2a5e91a0b63a62603e712001c51c77e8371b93cbb576bcb7d074b7588",
        "urls": [
          "bzz-raw://d6d8141b6c6dc72d2e684c1ae388c005fd78c9ca7fc9c15dddebd227ca4fd730",
          "dweb:/ipfs/QmPfJrR4qssu769TDWJnxdTozqKtZUxiY8fs95bhfECTvG"
        ],
        "license": "MIT"
      },
      "src/L2/L2CrossDomainMessenger.sol": {
        "keccak256": "0xd5b45c5535f2c9e1744743304a106abf19448a7e2085bdbbd885f1c3a6245b5c",
        "urls": [
          "bzz-raw://b20a79c0ea53699a8381f3e0addcc24fd4a4ffbfd730a2831df955c5385add7d",
          "dweb:/ipfs/QmaspRqrCKgw3ucD1jAfX4YXEr31TpFVLTBW35GTPzc3rb"
        ],
        "license": "MIT"
      },
      "src/L2/L2ToL1MessagePasser.sol": {
        "keccak256": "0x67f440defc45e97bf1494274a9061876cbdcb10625707c534a0cb04b1c057e21",
        "urls": [
          "bzz-raw://47900ccfcd1e4506d50dd3b14069da285eeb5f783020a0c74f58181b4c011460",
          "dweb:/ipfs/QmNUtEAxiwXT8QDbCHsX3uT4h2fh6k9f8LvMrmRK2N7K61"
        ],
        "license": "MIT"
      },
      "src/libraries/Arithmetic.sol": {
        "keccak256": "0x06a5a8b00527843f0cfc1bb3c0661316966a6cc432f88be31f23cde78cd07560",
        "urls": [
          "bzz-raw://d5209e78e5415c0bf8b350362a825cc56152811abd6fcf2df3d4fa47766d3dee",
          "dweb:/ipfs/Qmf43xyc4Um32NmccayDfhm8kSnS2mhHXpPZnwABJS7cWm"
        ],
        "license": "MIT"
      },
      "src/libraries/Burn.sol": {
        "keccak256": "0x90a795bcea3ef06d6d5011256c4bd63d1a4271f519246dbf1ee3e8f1c0e21010",
        "urls": [
          "bzz-raw://9f60c3aa77cf0c484ddda4754157cff4dc0e2eace4bea67990daff4c0612ab5f",
          "dweb:/ipfs/QmSYGanMFve9uBC17X7hFneSFnwnJxz86Jgh6MX9BRMweb"
        ],
        "license": "MIT"
      },
      "src/libraries/Constants.sol": {
        "keccak256": "0x8fcbc468fa4924f81538d4a6674031e12b62b61a88e869fdf099158a0d0c6a19",
        "urls": [
          "bzz-raw://fc7b9bca6c12fdd38e556650ec1eda3cccb0de4d474d2e97904cbd483b147359",
          "dweb:/ipfs/QmW4oKjDtHJj4cNfMhMLDteQEHSUuZtwrrFUJRnZCbQTJd"
        ],
        "license": "MIT"
      },
      "src/libraries/Encoding.sol": {
        "keccak256": "0xd5bbcb7da113e69562498d9543765e03912558ad66348682c2049c31e19f9d9b",
        "urls": [
          "bzz-raw://afc6656ea10062c0c9d0817bb8683636caebf9222c9c102f29ea54fff74a2f93",
          "dweb:/ipfs/QmTNWtMgrTRHM6XtdUmA8bMZcuFpXoFCXgXR5vRihZWLuW"
        ],
        "license": "MIT"
      },
      "src/libraries/Hashing.sol": {
        "keccak256": "0x44e2b2dcfffc39c0fc95ccd3c2118c7e7585fadf3dca327877d5756c7d4b21c3",
        "urls": [
          "bzz-raw://6c89e0d9cfcb08a0d3c46c85367a32bbd9703468ba4c0c5bb6e124c1d173b26b",
          "dweb:/ipfs/QmaY3nQHBBhHK1wrurVXiEeNL8hfZ1pRmhpqW44tFDJnDf"
        ],
        "license": "MIT"
      },
      "src/libraries/Predeploys.sol": {
        "keccak256": "0x5af3a849f68f7c9108858ebac5c769da8f1c0309b5c0cb42eb5cbb15e3fe6058",
        "urls": [
          "bzz-raw://6ffe76429a96d274577be66627eddad5cd05ad36d0cb6b9b3c3f9fa8a609dd7e",
          "dweb:/ipfs/QmVhWnB7Avg684TEQ9BExWqSN1YfLehUTWoqpjymeQEQHm"
        ],
        "license": "MIT"
      },
      "src/libraries/SafeCall.sol": {
        "keccak256": "0x0636a7abb242bb5d6f5606967c8929e6aa7e63468c1e2ce40ad4780d4c4bf94f",
        "urls": [
          "bzz-raw://a4daec2ac8f9907bbf84ef0a1c48f03bae8657619bc6f42b3a672f25c516f17a",
          "dweb:/ipfs/Qmf8gfRxBv8gEmCkP8YMPb2GGfj9QUnoNUyKE7UR2SWGnq"
        ],
        "license": "MIT"
      },
      "src/libraries/Types.sol": {
        "keccak256": "0x75900d651301940d24c00d14f0b3b6cbd6dcf379173ceaa31d9bf5be934a9aa4",
        "urls": [
          "bzz-raw://99c2632c5bf4fa3982391c32110eec9fa07917b483b2442cbaf18bdde5bdb24e",
          "dweb:/ipfs/QmSUs6Amkeootf5gKGbKi4mJpvhN2U8i1ED6ef2dskV5xc"
        ],
        "license": "MIT"
      },
      "src/libraries/rlp/RLPWriter.sol": {
        "keccak256": "0x60ac401490f321c9c55e996a2c65151cd5e60de5f8f297e7c94d541c29820bb6",
        "urls": [
          "bzz-raw://070f5814db07e4a89173d44a36d90e4261ce530f7336034c01635347f2c2d88b",
          "dweb:/ipfs/QmXqr9yW5Kc8MYgr5wSehU5AiqS9pZ4FKxv7vwiwpZCcyV"
        ],
        "license": "MIT"
      },
      "src/universal/CrossDomainMessenger.sol": {
        "keccak256": "0x4302ae78bcafde2737d4048bbf8fdb3dd4cd7254c015b91dfa14fdaafd412f4a",
        "urls": [
          "bzz-raw://78d3d1823ad4e1fba15921a0a361b452c85d111e2d53cbbed11a8632782ea8f3",
          "dweb:/ipfs/QmVc2rTRpn7g7WAUxDShSuy6dY5zmtbJ7hHC6sT9PcD3Gj"
        ],
        "license": "MIT"
      },
      "src/universal/ISemver.sol": {
        "keccak256": "0xba34562a8026f59886d2e07d1d58d90b9691d00e0788c6263cef6c22740cab44",
        "urls": [
          "bzz-raw://0826f998632f83c103c3085bf2e872db79a69022b6d2e0444c83a64ca5283c2a",
          "dweb:/ipfs/QmcJ7PNqkAfKqbjFGRordtAg1v9DvcBSKvdTkVvciLyvQR"
        ],
        "license": "MIT"
      },
      "src/vendor/AddressAliasHelper.sol": {
        "keccak256": "0x6ecb83b4ec80fbe49c22f4f95d90482de64660ef5d422a19f4d4b04df31c1237",
        "urls": [
          "bzz-raw://1d0885be6e473962f9a0622176a22300165ac0cc1a1d7f2e22b11c3d656ace88",
          "dweb:/ipfs/QmPRa3KmRpXW5P9ykveKRDgYN5zYo4cYLAYSnoqHX3KnXR"
        ],
        "license": "Apache-2.0"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 74884,
        "contract": "src/L2/L2CrossDomainMessenger.sol:L2CrossDomainMessenger",
        "label": "spacer_0_0_20",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 29536,
        "contract": "src/L2/L2CrossDomainMessenger.sol:L2CrossDomainMessenger",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 29539,
        "contract": "src/L2/L2CrossDomainMessenger.sol:L2CrossDomainMessenger",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 74891,
        "contract": "src/L2/L2CrossDomainMessenger.sol:L2CrossDomainMessenger",
        "label": "spacer_1_0_1600",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 74894,
        "contract": "src/L2/L2CrossDomainMessenger.sol:L2CrossDomainMessenger",
        "label": "spacer_51_0_20",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 74899,
        "contract": "src/L2/L2CrossDomainMessenger.sol:L2CrossDomainMessenger",
        "label": "spacer_52_0_1568",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 74902,
        "contract": "src/L2/L2CrossDomainMessenger.sol:L2CrossDomainMessenger",
        "label": "spacer_101_0_1",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 74907,
        "contract": "src/L2/L2CrossDomainMessenger.sol:L2CrossDomainMessenger",
        "label": "spacer_102_0_1568",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 74910,
        "contract": "src/L2/L2CrossDomainMessenger.sol:L2CrossDomainMessenger",
        "label": "spacer_151_0_32",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 74915,
        "contract": "src/L2/L2CrossDomainMessenger.sol:L2CrossDomainMessenger",
        "label": "spacer_152_0_1568",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 74920,
        "contract": "src/L2/L2CrossDomainMessenger.sol:L2CrossDomainMessenger",
        "label": "spacer_201_0_32",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 74925,
        "contract": "src/L2/L2CrossDomainMessenger.sol:L2CrossDomainMessenger",
        "label": "spacer_202_0_32",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 74973,
        "contract": "src/L2/L2CrossDomainMessenger.sol:L2CrossDomainMessenger",
        "label": "successfulMessages",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 74976,
        "contract": "src/L2/L2CrossDomainMessenger.sol:L2CrossDomainMessenger",
        "label": "xDomainMsgSender",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 74979,
        "contract": "src/L2/L2CrossDomainMessenger.sol:L2CrossDomainMessenger",
        "label": "msgNonce",
        "offset": 0,
        "slot": "205",
        "type": "t_uint240"
      },
      {
        "astId": 74984,
        "contract": "src/L2/L2CrossDomainMessenger.sol:L2CrossDomainMessenger",
        "label": "failedMessages",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 74989,
        "contract": "src/L2/L2CrossDomainMessenger.sol:L2CrossDomainMessenger",
        "label": "__gap",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_uint256)42_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)42_storage": {
        "encoding": "inplace",
        "label": "uint256[42]",
        "numberOfBytes": "1344",
        "base": "t_uint256"
      },
      "t_array(t_uint256)49_storage": {
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568",
        "base": "t_uint256"
      },
      "t_array(t_uint256)50_storage": {
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600",
        "base": "t_uint256"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint240": {
        "encoding": "inplace",
        "label": "uint240",
        "numberOfBytes": "30"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "MESSAGE_VERSION()": {
        "notice": "Current message version identifier."
      },
      "MIN_GAS_CALLDATA_OVERHEAD()": {
        "notice": "Extra gas added to base gas for each byte of calldata in a message."
      },
      "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR()": {
        "notice": "Denominator for dynamic overhead added to the base gas for a message."
      },
      "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR()": {
        "notice": "Numerator for dynamic overhead added to the base gas for a message."
      },
      "OTHER_MESSENGER()": {
        "notice": "Address of the paired CrossDomainMessenger contract on the other chain."
      },
      "RELAY_CALL_OVERHEAD()": {
        "notice": "Gas reserved for performing the external call in `relayMessage`."
      },
      "RELAY_CONSTANT_OVERHEAD()": {
        "notice": "Constant overhead added to the base gas for a message."
      },
      "RELAY_GAS_CHECK_BUFFER()": {
        "notice": "Gas reserved for the execution between the `hasMinGas` check and the external         call in `relayMessage`."
      },
      "RELAY_RESERVED_GAS()": {
        "notice": "Gas reserved for finalizing the execution of `relayMessage` after the safe call."
      },
      "baseGas(bytes,uint32)": {
        "notice": "Computes the amount of gas required to guarantee that a given message will be         received on the other chain without running out of gas. Guaranteeing that a message         will not run out of gas is important because this ensures that a message can always         be replayed on the other chain if it fails to execute completely."
      },
      "constructor": {
        "notice": "Constructs the L2CrossDomainMessenger contract."
      },
      "failedMessages(bytes32)": {
        "notice": "Mapping of message hashes to a boolean if and only if the message has failed to be         executed at least once. A message will not be present in this mapping if it         successfully executed on the first attempt."
      },
      "initialize()": {
        "notice": "Initializer."
      },
      "messageNonce()": {
        "notice": "Retrieves the next message nonce. Message version will be added to the upper two         bytes of the message nonce. Message version allows us to treat messages as having         different structures."
      },
      "relayMessage(uint256,address,address,uint256,uint256,bytes)": {
        "notice": "Relays a message that was sent by the other CrossDomainMessenger contract. Can only         be executed via cross-chain call from the other messenger OR if the message was         already received once and is currently being replayed."
      },
      "sendMessage(address,bytes,uint32)": {
        "notice": "Sends a message to some target address on the other chain. Note that if the call         always reverts, then the message will be unrelayable, and any ETH sent will be         permanently locked. The same will occur if the target on the other chain is         considered unsafe (see the _isUnsafeTarget() function)."
      },
      "successfulMessages(bytes32)": {
        "notice": "Mapping of message hashes to boolean receipt values. Note that a message will only         be present in this mapping if it has successfully been relayed on this chain, and         can therefore not be relayed again."
      },
      "xDomainMessageSender()": {
        "notice": "Retrieves the address of the contract or wallet that initiated the currently         executing message on the other chain. Will throw an error if there is no message         currently being executed. Allows the recipient of a call to see who triggered it."
      }
    },
    "events": {
      "FailedRelayedMessage(bytes32)": {
        "notice": "Emitted whenever a message fails to be relayed on this chain."
      },
      "RelayedMessage(bytes32)": {
        "notice": "Emitted whenever a message is successfully relayed on this chain."
      },
      "SentMessage(address,address,bytes,uint256,uint256)": {
        "notice": "Emitted whenever a message is sent to the other chain."
      },
      "SentMessageExtension1(address,uint256)": {
        "notice": "Additional event data to emit, required as of Bedrock. Cannot be merged with the         SentMessage event without breaking the ABI of this contract, this is good enough."
      }
    },
    "notice": "The L2CrossDomainMessenger is a high-level interface for message passing between L1 and         L2 on the L2 side. Users are generally encouraged to use this contract instead of lower         level message passing contracts."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "baseGas(bytes,uint32)": {
        "params": {
          "_message": "Message to compute the amount of required gas for.",
          "_minGasLimit": "Minimum desired gas limit when message goes to target."
        },
        "returns": {
          "_0": "Amount of gas required to guarantee message receipt."
        }
      },
      "constructor": {
        "params": {
          "_l1CrossDomainMessenger": "Address of the L1CrossDomainMessenger contract."
        }
      },
      "l1CrossDomainMessenger()": {
        "returns": {
          "_0": "Address of the L1CrossDomainMessenger contract."
        }
      },
      "messageNonce()": {
        "returns": {
          "_0": "Nonce of the next message to be sent, with added message version."
        }
      },
      "relayMessage(uint256,address,address,uint256,uint256,bytes)": {
        "params": {
          "_message": "Message to send to the target.",
          "_minGasLimit": "Minimum amount of gas that the message can be executed with.",
          "_nonce": "Nonce of the message being relayed.",
          "_sender": "Address of the user who sent the message.",
          "_target": "Address that the message is targeted at.",
          "_value": "ETH value to send with the message."
        }
      },
      "sendMessage(address,bytes,uint32)": {
        "params": {
          "_message": "Message to trigger the target address with.",
          "_minGasLimit": "Minimum gas limit that the message can be executed with.",
          "_target": "Target contract or wallet address."
        }
      },
      "xDomainMessageSender()": {
        "returns": {
          "_0": "Address of the sender of the currently executing message on the other chain."
        }
      }
    },
    "title": "L2CrossDomainMessenger"
  },
  "ast": {
    "absolutePath": "src/L2/L2CrossDomainMessenger.sol",
    "id": 62445,
    "exportedSymbols": {
      "AddressAliasHelper": [
        78280
      ],
      "CrossDomainMessenger": [
        75405
      ],
      "ISemver": [
        75927
      ],
      "L2CrossDomainMessenger": [
        62444
      ],
      "L2ToL1MessagePasser": [
        63242
      ],
      "Predeploys": [
        70727
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:2325:123",
    "nodes": [
      {
        "id": 62321,
        "nodeType": "PragmaDirective",
        "src": "32:23:123",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 62323,
        "nodeType": "ImportDirective",
        "src": "57:71:123",
        "nodes": [],
        "absolutePath": "src/vendor/AddressAliasHelper.sol",
        "file": "src/vendor/AddressAliasHelper.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 62445,
        "sourceUnit": 78281,
        "symbolAliases": [
          {
            "foreign": {
              "id": 62322,
              "name": "AddressAliasHelper",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 78280,
              "src": "66:18:123",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 62325,
        "nodeType": "ImportDirective",
        "src": "129:58:123",
        "nodes": [],
        "absolutePath": "src/libraries/Predeploys.sol",
        "file": "src/libraries/Predeploys.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 62445,
        "sourceUnit": 70728,
        "symbolAliases": [
          {
            "foreign": {
              "id": 62324,
              "name": "Predeploys",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 70727,
              "src": "138:10:123",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 62327,
        "nodeType": "ImportDirective",
        "src": "188:78:123",
        "nodes": [],
        "absolutePath": "src/universal/CrossDomainMessenger.sol",
        "file": "src/universal/CrossDomainMessenger.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 62445,
        "sourceUnit": 75406,
        "symbolAliases": [
          {
            "foreign": {
              "id": 62326,
              "name": "CrossDomainMessenger",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 75405,
              "src": "197:20:123",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 62329,
        "nodeType": "ImportDirective",
        "src": "267:52:123",
        "nodes": [],
        "absolutePath": "src/universal/ISemver.sol",
        "file": "src/universal/ISemver.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 62445,
        "sourceUnit": 75928,
        "symbolAliases": [
          {
            "foreign": {
              "id": 62328,
              "name": "ISemver",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 75927,
              "src": "276:7:123",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 62331,
        "nodeType": "ImportDirective",
        "src": "320:69:123",
        "nodes": [],
        "absolutePath": "src/L2/L2ToL1MessagePasser.sol",
        "file": "src/L2/L2ToL1MessagePasser.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 62445,
        "sourceUnit": 63243,
        "symbolAliases": [
          {
            "foreign": {
              "id": 62330,
              "name": "L2ToL1MessagePasser",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 63242,
              "src": "329:19:123",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 62444,
        "nodeType": "ContractDefinition",
        "src": "755:1601:123",
        "nodes": [
          {
            "id": 62340,
            "nodeType": "VariableDeclaration",
            "src": "855:40:123",
            "nodes": [],
            "baseFunctions": [
              75926
            ],
            "constant": true,
            "documentation": {
              "id": 62337,
              "nodeType": "StructuredDocumentation",
              "src": "826:24:123",
              "text": "@custom:semver 1.6.0"
            },
            "functionSelector": "54fd4d50",
            "mutability": "constant",
            "name": "version",
            "nameLocation": "878:7:123",
            "scope": 62444,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 62338,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "855:6:123",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "hexValue": "312e362e30",
              "id": 62339,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "888:7:123",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_89e9e2942a3a0ae264f9fc69cc446d8ed0f2be17b1e0b46fb3d7388eff1f1ab9",
                "typeString": "literal_string \"1.6.0\""
              },
              "value": "1.6.0"
            },
            "visibility": "public"
          },
          {
            "id": 62353,
            "nodeType": "FunctionDefinition",
            "src": "1053:120:123",
            "nodes": [],
            "body": {
              "id": 62352,
              "nodeType": "Block",
              "src": "1144:29:123",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 62349,
                      "name": "initialize",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 62364,
                      "src": "1154:10:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 62350,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1154:12:123",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 62351,
                  "nodeType": "ExpressionStatement",
                  "src": "1154:12:123"
                }
              ]
            },
            "documentation": {
              "id": 62341,
              "nodeType": "StructuredDocumentation",
              "src": "902:146:123",
              "text": "@notice Constructs the L2CrossDomainMessenger contract.\n @param _l1CrossDomainMessenger Address of the L1CrossDomainMessenger contract."
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 62346,
                    "name": "_l1CrossDomainMessenger",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 62343,
                    "src": "1119:23:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 62347,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 62345,
                  "name": "CrossDomainMessenger",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 75405,
                  "src": "1098:20:123"
                },
                "nodeType": "ModifierInvocation",
                "src": "1098:45:123"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 62344,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 62343,
                  "mutability": "mutable",
                  "name": "_l1CrossDomainMessenger",
                  "nameLocation": "1073:23:123",
                  "nodeType": "VariableDeclaration",
                  "scope": 62353,
                  "src": "1065:31:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 62342,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1065:7:123",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1064:33:123"
            },
            "returnParameters": {
              "id": 62348,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1144:0:123"
            },
            "scope": 62444,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 62364,
            "nodeType": "FunctionDefinition",
            "src": "1208:92:123",
            "nodes": [],
            "body": {
              "id": 62363,
              "nodeType": "Block",
              "src": "1254:46:123",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 62360,
                      "name": "__CrossDomainMessenger_init",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 75378,
                      "src": "1264:27:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 62361,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1264:29:123",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 62362,
                  "nodeType": "ExpressionStatement",
                  "src": "1264:29:123"
                }
              ]
            },
            "documentation": {
              "id": 62354,
              "nodeType": "StructuredDocumentation",
              "src": "1179:24:123",
              "text": "@notice Initializer."
            },
            "functionSelector": "8129fc1c",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "32",
                    "id": 62357,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1251:1:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  }
                ],
                "id": 62358,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 62356,
                  "name": "reinitializer",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29633,
                  "src": "1237:13:123"
                },
                "nodeType": "ModifierInvocation",
                "src": "1237:16:123"
              }
            ],
            "name": "initialize",
            "nameLocation": "1217:10:123",
            "parameters": {
              "id": 62355,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1227:2:123"
            },
            "returnParameters": {
              "id": 62359,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1254:0:123"
            },
            "scope": 62444,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 62373,
            "nodeType": "FunctionDefinition",
            "src": "1499:103:123",
            "nodes": [],
            "body": {
              "id": 62372,
              "nodeType": "Block",
              "src": "1563:39:123",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 62370,
                    "name": "OTHER_MESSENGER",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 74968,
                    "src": "1580:15:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 62369,
                  "id": 62371,
                  "nodeType": "Return",
                  "src": "1573:22:123"
                }
              ]
            },
            "documentation": {
              "id": 62365,
              "nodeType": "StructuredDocumentation",
              "src": "1306:188:123",
              "text": "@custom:legacy\n @notice Legacy getter for the remote messenger.\n         Use otherMessenger going forward.\n @return Address of the L1CrossDomainMessenger contract."
            },
            "functionSelector": "a7119869",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "l1CrossDomainMessenger",
            "nameLocation": "1508:22:123",
            "parameters": {
              "id": 62366,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1530:2:123"
            },
            "returnParameters": {
              "id": 62369,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 62368,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 62373,
                  "src": "1554:7:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 62367,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1554:7:123",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1553:9:123"
            },
            "scope": 62444,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 62402,
            "nodeType": "FunctionDefinition",
            "src": "1649:269:123",
            "nodes": [],
            "body": {
              "id": 62401,
              "nodeType": "Block",
              "src": "1756:162:123",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 62396,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62376,
                        "src": "1880:3:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 62397,
                        "name": "_gasLimit",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62378,
                        "src": "1885:9:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "id": 62398,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62382,
                        "src": "1896:5:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "id": 62389,
                                    "name": "Predeploys",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 70727,
                                    "src": "1794:10:123",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_Predeploys_$70727_$",
                                      "typeString": "type(library Predeploys)"
                                    }
                                  },
                                  "id": 62390,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "L2_TO_L1_MESSAGE_PASSER",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 70651,
                                  "src": "1794:34:123",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 62388,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1786:8:123",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_payable_$",
                                  "typeString": "type(address payable)"
                                },
                                "typeName": {
                                  "id": 62387,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1786:8:123",
                                  "stateMutability": "payable",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 62391,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1786:43:123",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            ],
                            "id": 62386,
                            "name": "L2ToL1MessagePasser",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 63242,
                            "src": "1766:19:123",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_L2ToL1MessagePasser_$63242_$",
                              "typeString": "type(contract L2ToL1MessagePasser)"
                            }
                          },
                          "id": 62392,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1766:64:123",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_L2ToL1MessagePasser_$63242",
                            "typeString": "contract L2ToL1MessagePasser"
                          }
                        },
                        "id": 62393,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "initiateWithdrawal",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 63228,
                        "src": "1766:83:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_payable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                          "typeString": "function (address,uint256,bytes memory) payable external"
                        }
                      },
                      "id": 62395,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "id": 62394,
                          "name": "_value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 62380,
                          "src": "1858:6:123",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "1766:100:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_payable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$value",
                        "typeString": "function (address,uint256,bytes memory) payable external"
                      }
                    },
                    "id": 62399,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1766:145:123",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 62400,
                  "nodeType": "ExpressionStatement",
                  "src": "1766:145:123"
                }
              ]
            },
            "baseFunctions": [
              75390
            ],
            "documentation": {
              "id": 62374,
              "nodeType": "StructuredDocumentation",
              "src": "1608:36:123",
              "text": "@inheritdoc CrossDomainMessenger"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_sendMessage",
            "nameLocation": "1658:12:123",
            "overrides": {
              "id": 62384,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1747:8:123"
            },
            "parameters": {
              "id": 62383,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 62376,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "1679:3:123",
                  "nodeType": "VariableDeclaration",
                  "scope": 62402,
                  "src": "1671:11:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 62375,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1671:7:123",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 62378,
                  "mutability": "mutable",
                  "name": "_gasLimit",
                  "nameLocation": "1691:9:123",
                  "nodeType": "VariableDeclaration",
                  "scope": 62402,
                  "src": "1684:16:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 62377,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "1684:6:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 62380,
                  "mutability": "mutable",
                  "name": "_value",
                  "nameLocation": "1710:6:123",
                  "nodeType": "VariableDeclaration",
                  "scope": 62402,
                  "src": "1702:14:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 62379,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1702:7:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 62382,
                  "mutability": "mutable",
                  "name": "_data",
                  "nameLocation": "1731:5:123",
                  "nodeType": "VariableDeclaration",
                  "scope": 62402,
                  "src": "1718:18:123",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 62381,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1718:5:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1670:67:123"
            },
            "returnParameters": {
              "id": 62385,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1756:0:123"
            },
            "scope": 62444,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 62418,
            "nodeType": "FunctionDefinition",
            "src": "1965:156:123",
            "nodes": [],
            "body": {
              "id": 62417,
              "nodeType": "Block",
              "src": "2032:89:123",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 62415,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 62411,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "2084:3:123",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 62412,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "2084:10:123",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "expression": {
                          "id": 62409,
                          "name": "AddressAliasHelper",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 78280,
                          "src": "2049:18:123",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_AddressAliasHelper_$78280_$",
                            "typeString": "type(library AddressAliasHelper)"
                          }
                        },
                        "id": 62410,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "undoL1ToL2Alias",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 78279,
                        "src": "2049:34:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_address_$returns$_t_address_$",
                          "typeString": "function (address) pure returns (address)"
                        }
                      },
                      "id": 62413,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2049:46:123",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "id": 62414,
                      "name": "OTHER_MESSENGER",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 74968,
                      "src": "2099:15:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2049:65:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 62408,
                  "id": 62416,
                  "nodeType": "Return",
                  "src": "2042:72:123"
                }
              ]
            },
            "baseFunctions": [
              75396
            ],
            "documentation": {
              "id": 62403,
              "nodeType": "StructuredDocumentation",
              "src": "1924:36:123",
              "text": "@inheritdoc CrossDomainMessenger"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_isOtherMessenger",
            "nameLocation": "1974:17:123",
            "overrides": {
              "id": 62405,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2008:8:123"
            },
            "parameters": {
              "id": 62404,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1991:2:123"
            },
            "returnParameters": {
              "id": 62408,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 62407,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 62418,
                  "src": "2026:4:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 62406,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2026:4:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2025:6:123"
            },
            "scope": 62444,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 62443,
            "nodeType": "FunctionDefinition",
            "src": "2168:186:123",
            "nodes": [],
            "body": {
              "id": 62442,
              "nodeType": "Block",
              "src": "2248:106:123",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 62440,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 62432,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 62427,
                        "name": "_target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62421,
                        "src": "2265:7:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "arguments": [
                          {
                            "id": 62430,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "2284:4:123",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_L2CrossDomainMessenger_$62444",
                              "typeString": "contract L2CrossDomainMessenger"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_L2CrossDomainMessenger_$62444",
                              "typeString": "contract L2CrossDomainMessenger"
                            }
                          ],
                          "id": 62429,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2276:7:123",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 62428,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2276:7:123",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 62431,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2276:13:123",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "2265:24:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 62439,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 62433,
                        "name": "_target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62421,
                        "src": "2293:7:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 62436,
                              "name": "Predeploys",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 70727,
                              "src": "2312:10:123",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_Predeploys_$70727_$",
                                "typeString": "type(library Predeploys)"
                              }
                            },
                            "id": 62437,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "L2_TO_L1_MESSAGE_PASSER",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 70651,
                            "src": "2312:34:123",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 62435,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2304:7:123",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 62434,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2304:7:123",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 62438,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2304:43:123",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "2293:54:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "2265:82:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 62426,
                  "id": 62441,
                  "nodeType": "Return",
                  "src": "2258:89:123"
                }
              ]
            },
            "baseFunctions": [
              75404
            ],
            "documentation": {
              "id": 62419,
              "nodeType": "StructuredDocumentation",
              "src": "2127:36:123",
              "text": "@inheritdoc CrossDomainMessenger"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_isUnsafeTarget",
            "nameLocation": "2177:15:123",
            "overrides": {
              "id": 62423,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2224:8:123"
            },
            "parameters": {
              "id": 62422,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 62421,
                  "mutability": "mutable",
                  "name": "_target",
                  "nameLocation": "2201:7:123",
                  "nodeType": "VariableDeclaration",
                  "scope": 62443,
                  "src": "2193:15:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 62420,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2193:7:123",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2192:17:123"
            },
            "returnParameters": {
              "id": 62426,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 62425,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 62443,
                  "src": "2242:4:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 62424,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2242:4:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2241:6:123"
            },
            "scope": 62444,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 62333,
              "name": "CrossDomainMessenger",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 75405,
              "src": "790:20:123"
            },
            "id": 62334,
            "nodeType": "InheritanceSpecifier",
            "src": "790:20:123"
          },
          {
            "baseName": {
              "id": 62335,
              "name": "ISemver",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 75927,
              "src": "812:7:123"
            },
            "id": 62336,
            "nodeType": "InheritanceSpecifier",
            "src": "812:7:123"
          }
        ],
        "canonicalName": "L2CrossDomainMessenger",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 62332,
          "nodeType": "StructuredDocumentation",
          "src": "391:364:123",
          "text": "@custom:proxied\n @custom:predeploy 0x4200000000000000000000000000000000000007\n @title L2CrossDomainMessenger\n @notice The L2CrossDomainMessenger is a high-level interface for message passing between L1 and\n         L2 on the L2 side. Users are generally encouraged to use this contract instead of lower\n         level message passing contracts."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          62444,
          75927,
          75405,
          74926,
          29680,
          74885
        ],
        "name": "L2CrossDomainMessenger",
        "nameLocation": "764:22:123",
        "scope": 62445,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 123
}